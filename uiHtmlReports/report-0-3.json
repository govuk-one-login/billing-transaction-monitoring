{"info":{"type":"runner","start":"2023-10-09T17:24:01.993Z","end":"2023-10-09T17:24:15.164Z","_duration":13171,"cid":"0-3","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"117.0.5938.132","chrome":{"chromedriverVersion":"116.0.5845.96 (1a391816688002153ef791ffe60d9e899a71a037-refs/branch-heads/5845@{#1382})","userDataDir":"/tmp/.org.chromium.Chromium.73TnbE"},"fedcm:accounts":true,"goog:chromeOptions":{"debuggerAddress":"localhost:36473"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:extension:minPinLength":true,"webauthn:extension:prf":true,"webauthn:virtualAuthenticators":true,"sessionId":"76835590d50eefb00369e6c439ab0416"},"sanitizedCapabilities":"chrome.117_0_5938_132.linux","config":{"protocol":"http","hostname":"localhost","port":9515,"path":"/","capabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--disable-dev-shm-usage","--disable-gpu","--no-sandbox"]}},"logLevel":"error","connectionRetryTimeout":120000,"connectionRetryCount":3,"logLevels":{},"enableDirectConnect":true,"strictSSL":true,"requestedCapabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--disable-dev-shm-usage","--disable-gpu","--no-sandbox"]}},"specs":["./ui-tests/specs/**/*.spec.ts"],"exclude":[],"suites":{},"rootDir":"/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring","baseUrl":"https://pr-508.btm.dev.account.gov.uk","bail":0,"waitforInterval":500,"waitforTimeout":10000,"framework":"mocha","reporters":["spec",["junit",{"outputDir":"./ui-tests/reports/junitReports"}],[null,{"outputDir":"./ui-tests/reports/uiHtmlReports"}]],"services":["chromedriver"],"execArgv":[],"maxInstances":10,"maxInstancesPerCapability":100,"injectGlobals":true,"specFileRetries":0,"specFileRetriesDelay":0,"specFileRetriesDeferred":false,"filesToWatch":[],"onPrepare":[null],"onWorkerStart":[],"onWorkerEnd":[],"before":[],"beforeSession":[],"beforeSuite":[],"beforeHook":[],"beforeTest":[],"beforeCommand":[],"afterCommand":[],"afterTest":[],"afterHook":[],"afterSuite":[],"afterSession":[],"after":[],"onComplete":[null],"onReload":[],"automationProtocol":"webdriver"},"specs":["file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/home.spec.ts"],"sessionId":"76835590d50eefb00369e6c439ab0416","isMultiremote":false,"instanceOptions":{"76835590d50eefb00369e6c439ab0416":{"protocol":"http","hostname":"localhost","port":9515,"path":"/","capabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--disable-dev-shm-usage","--disable-gpu","--no-sandbox"]}},"logLevel":"error","connectionRetryTimeout":120000,"connectionRetryCount":3,"logLevels":{},"enableDirectConnect":true,"strictSSL":true,"requestedCapabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--disable-dev-shm-usage","--disable-gpu","--no-sandbox"]}},"specs":["./ui-tests/specs/**/*.spec.ts"],"exclude":[],"suites":{},"rootDir":"/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring","baseUrl":"https://pr-508.btm.dev.account.gov.uk","bail":0,"waitforInterval":500,"waitforTimeout":10000,"framework":"mocha","reporters":["spec",["junit",{"outputDir":"./ui-tests/reports/junitReports"}],[null,{"outputDir":"./ui-tests/reports/uiHtmlReports"}]],"services":["chromedriver"],"execArgv":[],"maxInstances":10,"maxInstancesPerCapability":100,"injectGlobals":true,"specFileRetries":0,"specFileRetriesDelay":0,"specFileRetriesDeferred":false,"filesToWatch":[],"onPrepare":[null],"onWorkerStart":[],"onWorkerEnd":[],"before":[],"beforeSession":[],"beforeSuite":[],"beforeHook":[],"beforeTest":[],"beforeCommand":[],"afterCommand":[],"afterTest":[],"afterHook":[],"afterSuite":[],"afterSession":[],"after":[],"onComplete":[null],"onReload":[],"automationProtocol":"webdriver"}},"retry":0,"failures":0,"retries":0},"metrics":{"passed":6,"skipped":0,"failed":0,"duration":13171,"start":"2023-10-09T17:24:01.993Z","end":"2023-10-09T17:24:15Z"},"title":"Test Report Title","suites":[{"type":"suite:start","start":"2023-10-09T17:24:02.007Z","end":"2023-10-09T17:24:10.248Z","_duration":8241,"uid":"suite-0-0","cid":"0-3","file":"/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/home.spec.ts","title":"Home Page Tests","fullTitle":"Home Page Tests","tests":[{"type":"test","start":"2023-10-09T17:24:08.335Z","end":"2023-10-09T17:24:08.561Z","_duration":226,"uid":"test-00-0","cid":"0-3","title":"Should display 'Billings and reconciliation' as the heading","fullTitle":"Home Page Tests.Should display 'Billings and reconciliation' as the heading","output":[],"retries":0,"parent":"Home Page Tests","state":"passed","body":"async () => {\n        expect(await HomePage.isPageHeadingDisplayed()).toBe(true);\n        expect(await HomePage.getPageHeadingText()).toEqual(\"Billings and reconciliation\");\n    }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-09T17:24:08.562Z","end":"2023-10-09T17:24:08.694Z","_duration":132,"uid":"test-00-1","cid":"0-3","title":"Should display 'Billings and reconciliation for the OneLogin programme' as the page sub heading","fullTitle":"Home Page Tests.Should display 'Billings and reconciliation for the OneLogin programme' as the page sub heading","output":[],"retries":0,"parent":"Home Page Tests","state":"passed","body":"async () => {\n        expect(await HomePage.getPageParagraphText()).toEqual(\"Billings and reconciliation for the OneLogin programme\");\n    }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-09T17:24:08.695Z","end":"2023-10-09T17:24:10.247Z","_duration":1552,"uid":"test-00-2","cid":"0-3","title":"Should navigate to the Contracts page when clicked on the link","fullTitle":"Home Page Tests.Should navigate to the Contracts page when clicked on the link","output":[],"retries":0,"parent":"Home Page Tests","state":"passed","body":"async () => {\n        await HomePage.clickOnContractsPageLink();\n        const newPageUrl = await browser.getUrl();\n        expect(newPageUrl).toMatch(/contracts$/);\n    }","events":[],"errorIndex":0}],"hooks":[{"type":"hook","start":"2023-10-09T17:24:02.007Z","end":"2023-10-09T17:24:08.335Z","_duration":6328,"uid":"hook-00-0","cid":"0-3","title":"\"before all\" hook for Home Page Tests","parent":"Home Page Tests","body":"async () => {\n        await browser.url(\" \");\n        await waitForPageLoad();\n    }","errors":[],"currentTest":"Should display 'Billings and reconciliation' as the heading"}],"suites":[],"parent":"","hooksAndTests":[{"type":"hook","start":"2023-10-09T17:24:02.007Z","end":"2023-10-09T17:24:08.335Z","_duration":6328,"uid":"hook-00-0","cid":"0-3","title":"\"before all\" hook for Home Page Tests","parent":"Home Page Tests","body":"async () => {\n        await browser.url(\" \");\n        await waitForPageLoad();\n    }","errors":[],"currentTest":"Should display 'Billings and reconciliation' as the heading"},{"type":"test","start":"2023-10-09T17:24:08.335Z","end":"2023-10-09T17:24:08.561Z","_duration":226,"uid":"test-00-0","cid":"0-3","title":"Should display 'Billings and reconciliation' as the heading","fullTitle":"Home Page Tests.Should display 'Billings and reconciliation' as the heading","output":[],"retries":0,"parent":"Home Page Tests","state":"passed","body":"async () => {\n        expect(await HomePage.isPageHeadingDisplayed()).toBe(true);\n        expect(await HomePage.getPageHeadingText()).toEqual(\"Billings and reconciliation\");\n    }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-09T17:24:08.562Z","end":"2023-10-09T17:24:08.694Z","_duration":132,"uid":"test-00-1","cid":"0-3","title":"Should display 'Billings and reconciliation for the OneLogin programme' as the page sub heading","fullTitle":"Home Page Tests.Should display 'Billings and reconciliation for the OneLogin programme' as the page sub heading","output":[],"retries":0,"parent":"Home Page Tests","state":"passed","body":"async () => {\n        expect(await HomePage.getPageParagraphText()).toEqual(\"Billings and reconciliation for the OneLogin programme\");\n    }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-09T17:24:08.695Z","end":"2023-10-09T17:24:10.247Z","_duration":1552,"uid":"test-00-2","cid":"0-3","title":"Should navigate to the Contracts page when clicked on the link","fullTitle":"Home Page Tests.Should navigate to the Contracts page when clicked on the link","output":[],"retries":0,"parent":"Home Page Tests","state":"passed","body":"async () => {\n        await HomePage.clickOnContractsPageLink();\n        const newPageUrl = await browser.getUrl();\n        expect(newPageUrl).toMatch(/contracts$/);\n    }","events":[],"errorIndex":0}]},{"type":"suite:start","start":"2023-10-09T17:24:10.248Z","end":"2023-10-09T17:24:15.093Z","_duration":4842,"uid":"suite-0-1","cid":"0-3","file":"/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/home.spec.ts","title":"Home Page Overview table Tests","fullTitle":"Home Page Overview table Tests","tests":[{"type":"test","start":"2023-10-09T17:24:10.248Z","end":"2023-10-09T17:24:11.785Z","_duration":1537,"uid":"test-01-0","cid":"0-3","title":"Should display the overview table with correct data","fullTitle":"Home Page Overview table Tests.Should display the overview table with correct data","output":[],"retries":0,"parent":"Home Page Overview table Tests","state":"passed","body":"async () => {\n        const tableData = await HomePage.getTableData(await HomePage.overViewTable);\n        const expectedTableDataFromJson = getLatestInvoicePerVendor().map((invoice) => {\n            const monthOrQuarterString = invoice.invoice_is_quarterly === \"true\"\n                ? quarterName(invoice.month)\n                : prettyMonthName(invoice.month);\n            const reconciliationDetails = generateExpectedOverviewTableStatusFromPercentagePriceDifference(parseFloat(invoice.price_difference_percentage));\n            return {\n                contractName: invoice.contract_name,\n                vendor: invoice.vendor_name,\n                period: `${monthOrQuarterString} ${invoice.year}`,\n                reconciliationDetails,\n                details: \"View Invoice\",\n            };\n        });\n        const sortedTableDataByVendor = tableData\n            .map((data) => ({\n            contractName: data[\"Contract name\"].trim(),\n            vendor: data.Vendor.trim(),\n            period: data.Period.trim(),\n            reconciliationDetails: data[\"Reconciliation status\"]\n                .trim()\n                .toUpperCase(),\n            details: data.Details.trim(),\n        }))\n            .sort((a, b) => a.vendor.localeCompare(b.vendor));\n        const sortedExpectedData = Array.from(expectedTableDataFromJson).sort((a, b) => a.vendor.localeCompare(b.vendor));\n        expect(sortedExpectedData).toEqual(sortedTableDataByVendor);\n    }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-09T17:24:11.785Z","end":"2023-10-09T17:24:13.277Z","_duration":1492,"uid":"test-01-1","cid":"0-3","title":"Should navigate to the correct contract page on \"Contract Name\" click","fullTitle":"Home Page Overview table Tests.Should navigate to the correct contract page on \"Contract Name\" click","output":[],"retries":0,"parent":"Home Page Overview table Tests","state":"passed","body":"async () => {\n        const firstInvoice = getLatestInvoicePerVendor().sort((a, b) => a.contract_name.localeCompare(b.contract_name))[0];\n        await HomePage.clickOnFirstContractInTable();\n        await waitForPageLoad();\n        expect(await browser.getUrl()).toContain(`${firstInvoice.contract_id}/invoices`);\n    }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-09T17:24:13.277Z","end":"2023-10-09T17:24:15.090Z","_duration":1813,"uid":"test-01-2","cid":"0-3","title":"Should navigate to the correct invoice page on \"View Invoice\" click","fullTitle":"Home Page Overview table Tests.Should navigate to the correct invoice page on \"View Invoice\" click","output":[],"retries":0,"parent":"Home Page Overview table Tests","state":"passed","body":"async () => {\n        const firstInvoice = getLatestInvoicePerVendor().sort((a, b) => a.contract_name.localeCompare(b.contract_name))[0];\n        await HomePage.clickOnViewInvoiceLink();\n        await waitForPageLoad();\n        const expectedMonthOrQuarter = firstInvoice.invoice_is_quarterly === \"true\"\n            ? quarterName(firstInvoice.month).toLowerCase()\n            : firstInvoice.month;\n        expect(await browser.getUrl()).toContain(`${firstInvoice.contract_id}/invoices/${firstInvoice.year}-${expectedMonthOrQuarter}`);\n    }","events":[],"errorIndex":0}],"hooks":[{"type":"hook","start":"2023-10-09T17:24:10.249Z","end":"2023-10-09T17:24:11.334Z","_duration":1085,"uid":"hook-01-0","cid":"0-3","title":"\"before each\" hook for Home Page Overview table Tests","parent":"Home Page Overview table Tests","body":"async () => {\n        await browser.url(\" \");\n        await waitForPageLoad();\n    }","errors":[],"currentTest":"Should display the overview table with correct data"},{"type":"hook","start":"2023-10-09T17:24:11.785Z","end":"2023-10-09T17:24:12.793Z","_duration":1008,"uid":"hook-01-1","cid":"0-3","title":"\"before each\" hook for Home Page Overview table Tests","parent":"Home Page Overview table Tests","body":"async () => {\n        await browser.url(\" \");\n        await waitForPageLoad();\n    }","errors":[],"currentTest":"Should navigate to the correct contract page on \"Contract Name\" click"},{"type":"hook","start":"2023-10-09T17:24:13.277Z","end":"2023-10-09T17:24:14.355Z","_duration":1078,"uid":"hook-01-2","cid":"0-3","title":"\"before each\" hook for Home Page Overview table Tests","parent":"Home Page Overview table Tests","body":"async () => {\n        await browser.url(\" \");\n        await waitForPageLoad();\n    }","errors":[],"currentTest":"Should navigate to the correct invoice page on \"View Invoice\" click"}],"suites":[],"parent":"","hooksAndTests":[{"type":"test","start":"2023-10-09T17:24:10.248Z","end":"2023-10-09T17:24:11.785Z","_duration":1537,"uid":"test-01-0","cid":"0-3","title":"Should display the overview table with correct data","fullTitle":"Home Page Overview table Tests.Should display the overview table with correct data","output":[],"retries":0,"parent":"Home Page Overview table Tests","state":"passed","body":"async () => {\n        const tableData = await HomePage.getTableData(await HomePage.overViewTable);\n        const expectedTableDataFromJson = getLatestInvoicePerVendor().map((invoice) => {\n            const monthOrQuarterString = invoice.invoice_is_quarterly === \"true\"\n                ? quarterName(invoice.month)\n                : prettyMonthName(invoice.month);\n            const reconciliationDetails = generateExpectedOverviewTableStatusFromPercentagePriceDifference(parseFloat(invoice.price_difference_percentage));\n            return {\n                contractName: invoice.contract_name,\n                vendor: invoice.vendor_name,\n                period: `${monthOrQuarterString} ${invoice.year}`,\n                reconciliationDetails,\n                details: \"View Invoice\",\n            };\n        });\n        const sortedTableDataByVendor = tableData\n            .map((data) => ({\n            contractName: data[\"Contract name\"].trim(),\n            vendor: data.Vendor.trim(),\n            period: data.Period.trim(),\n            reconciliationDetails: data[\"Reconciliation status\"]\n                .trim()\n                .toUpperCase(),\n            details: data.Details.trim(),\n        }))\n            .sort((a, b) => a.vendor.localeCompare(b.vendor));\n        const sortedExpectedData = Array.from(expectedTableDataFromJson).sort((a, b) => a.vendor.localeCompare(b.vendor));\n        expect(sortedExpectedData).toEqual(sortedTableDataByVendor);\n    }","events":[],"errorIndex":0},{"type":"hook","start":"2023-10-09T17:24:10.249Z","end":"2023-10-09T17:24:11.334Z","_duration":1085,"uid":"hook-01-0","cid":"0-3","title":"\"before each\" hook for Home Page Overview table Tests","parent":"Home Page Overview table Tests","body":"async () => {\n        await browser.url(\" \");\n        await waitForPageLoad();\n    }","errors":[],"currentTest":"Should display the overview table with correct data"},{"type":"test","start":"2023-10-09T17:24:11.785Z","end":"2023-10-09T17:24:13.277Z","_duration":1492,"uid":"test-01-1","cid":"0-3","title":"Should navigate to the correct contract page on \"Contract Name\" click","fullTitle":"Home Page Overview table Tests.Should navigate to the correct contract page on \"Contract Name\" click","output":[],"retries":0,"parent":"Home Page Overview table Tests","state":"passed","body":"async () => {\n        const firstInvoice = getLatestInvoicePerVendor().sort((a, b) => a.contract_name.localeCompare(b.contract_name))[0];\n        await HomePage.clickOnFirstContractInTable();\n        await waitForPageLoad();\n        expect(await browser.getUrl()).toContain(`${firstInvoice.contract_id}/invoices`);\n    }","events":[],"errorIndex":0},{"type":"hook","start":"2023-10-09T17:24:11.785Z","end":"2023-10-09T17:24:12.793Z","_duration":1008,"uid":"hook-01-1","cid":"0-3","title":"\"before each\" hook for Home Page Overview table Tests","parent":"Home Page Overview table Tests","body":"async () => {\n        await browser.url(\" \");\n        await waitForPageLoad();\n    }","errors":[],"currentTest":"Should navigate to the correct contract page on \"Contract Name\" click"},{"type":"test","start":"2023-10-09T17:24:13.277Z","end":"2023-10-09T17:24:15.090Z","_duration":1813,"uid":"test-01-2","cid":"0-3","title":"Should navigate to the correct invoice page on \"View Invoice\" click","fullTitle":"Home Page Overview table Tests.Should navigate to the correct invoice page on \"View Invoice\" click","output":[],"retries":0,"parent":"Home Page Overview table Tests","state":"passed","body":"async () => {\n        const firstInvoice = getLatestInvoicePerVendor().sort((a, b) => a.contract_name.localeCompare(b.contract_name))[0];\n        await HomePage.clickOnViewInvoiceLink();\n        await waitForPageLoad();\n        const expectedMonthOrQuarter = firstInvoice.invoice_is_quarterly === \"true\"\n            ? quarterName(firstInvoice.month).toLowerCase()\n            : firstInvoice.month;\n        expect(await browser.getUrl()).toContain(`${firstInvoice.contract_id}/invoices/${firstInvoice.year}-${expectedMonthOrQuarter}`);\n    }","events":[],"errorIndex":0},{"type":"hook","start":"2023-10-09T17:24:13.277Z","end":"2023-10-09T17:24:14.355Z","_duration":1078,"uid":"hook-01-2","cid":"0-3","title":"\"before each\" hook for Home Page Overview table Tests","parent":"Home Page Overview table Tests","body":"async () => {\n        await browser.url(\" \");\n        await waitForPageLoad();\n    }","errors":[],"currentTest":"Should navigate to the correct invoice page on \"View Invoice\" click"}]}],"reportFile":"/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/reports/uiHtmlReports/report-0-3.html","browserName":"not specified"}