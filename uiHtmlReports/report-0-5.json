{"info":{"type":"runner","start":"2023-10-11T20:39:50.251Z","end":"2023-10-11T20:40:03.062Z","_duration":12811,"cid":"0-5","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"117.0.5938.132","chrome":{"chromedriverVersion":"116.0.5845.96 (1a391816688002153ef791ffe60d9e899a71a037-refs/branch-heads/5845@{#1382})","userDataDir":"/tmp/.org.chromium.Chromium.pHz1kX"},"fedcm:accounts":true,"goog:chromeOptions":{"debuggerAddress":"localhost:34213"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:extension:minPinLength":true,"webauthn:extension:prf":true,"webauthn:virtualAuthenticators":true,"sessionId":"f1f01221210ac799fcf9cf316a0c4e1c"},"sanitizedCapabilities":"chrome.117_0_5938_132.linux","config":{"protocol":"http","hostname":"localhost","port":9515,"path":"/","capabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--disable-dev-shm-usage","--disable-gpu","--no-sandbox"]}},"logLevel":"error","connectionRetryTimeout":120000,"connectionRetryCount":3,"logLevels":{},"enableDirectConnect":true,"strictSSL":true,"requestedCapabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--disable-dev-shm-usage","--disable-gpu","--no-sandbox"]}},"specs":["./ui-tests/specs/**/*.spec.ts"],"exclude":[],"suites":{},"rootDir":"/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring","baseUrl":"https://pr-509.btm.dev.account.gov.uk","bail":0,"waitforInterval":500,"waitforTimeout":10000,"framework":"mocha","reporters":["spec",["junit",{"outputDir":"./ui-tests/reports/junitReports"}],[null,{"outputDir":"./ui-tests/reports/uiHtmlReports"}]],"services":["chromedriver"],"execArgv":[],"maxInstances":10,"maxInstancesPerCapability":100,"injectGlobals":true,"specFileRetries":0,"specFileRetriesDelay":0,"specFileRetriesDeferred":false,"filesToWatch":[],"onPrepare":[null],"onWorkerStart":[],"onWorkerEnd":[],"before":[],"beforeSession":[],"beforeSuite":[],"beforeHook":[],"beforeTest":[],"beforeCommand":[],"afterCommand":[],"afterTest":[],"afterHook":[],"afterSuite":[],"afterSession":[],"after":[],"onComplete":[null],"onReload":[],"automationProtocol":"webdriver"},"specs":["file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts"],"sessionId":"f1f01221210ac799fcf9cf316a0c4e1c","isMultiremote":false,"instanceOptions":{"f1f01221210ac799fcf9cf316a0c4e1c":{"protocol":"http","hostname":"localhost","port":9515,"path":"/","capabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--disable-dev-shm-usage","--disable-gpu","--no-sandbox"]}},"logLevel":"error","connectionRetryTimeout":120000,"connectionRetryCount":3,"logLevels":{},"enableDirectConnect":true,"strictSSL":true,"requestedCapabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--disable-dev-shm-usage","--disable-gpu","--no-sandbox"]}},"specs":["./ui-tests/specs/**/*.spec.ts"],"exclude":[],"suites":{},"rootDir":"/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring","baseUrl":"https://pr-509.btm.dev.account.gov.uk","bail":0,"waitforInterval":500,"waitforTimeout":10000,"framework":"mocha","reporters":["spec",["junit",{"outputDir":"./ui-tests/reports/junitReports"}],[null,{"outputDir":"./ui-tests/reports/uiHtmlReports"}]],"services":["chromedriver"],"execArgv":[],"maxInstances":10,"maxInstancesPerCapability":100,"injectGlobals":true,"specFileRetries":0,"specFileRetriesDelay":0,"specFileRetriesDeferred":false,"filesToWatch":[],"onPrepare":[null],"onWorkerStart":[],"onWorkerEnd":[],"before":[],"beforeSession":[],"beforeSuite":[],"beforeHook":[],"beforeTest":[],"beforeCommand":[],"afterCommand":[],"afterTest":[],"afterHook":[],"afterSuite":[],"afterSession":[],"after":[],"onComplete":[null],"onReload":[],"automationProtocol":"webdriver"}},"retry":0,"failures":0,"retries":0},"metrics":{"passed":12,"skipped":0,"failed":0,"duration":12811,"start":"2023-10-11T20:39:50.251Z","end":"2023-10-11T20:40:03Z"},"title":"Test Report Title","suites":[{"type":"suite:start","start":"2023-10-11T20:39:50.290Z","end":"2023-10-11T20:40:02.996Z","_duration":12705,"uid":"suite-0-0","cid":"0-5","file":"/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts","title":"InvoicesList Page","fullTitle":"InvoicesList Page","tests":[{"type":"test","start":"2023-10-11T20:39:50.359Z","end":"2023-10-11T20:39:57.680Z","_duration":7321,"uid":"test-00-0","cid":"0-5","title":"should display the correct vendor name for Vendor Three","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Three","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-11T20:39:57.681Z","end":"2023-10-11T20:39:58.183Z","_duration":502,"uid":"test-00-1","cid":"0-5","title":"should display the correct vendor name for Vendor Five","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Five","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-11T20:39:58.184Z","end":"2023-10-11T20:39:58.646Z","_duration":462,"uid":"test-00-2","cid":"0-5","title":"should display the correct vendor name for Vendor Four","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Four","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-11T20:39:58.647Z","end":"2023-10-11T20:39:59.397Z","_duration":750,"uid":"test-00-3","cid":"0-5","title":"should display the correct vendor name for Vendor Two","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Two","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-11T20:39:59.398Z","end":"2023-10-11T20:39:59.851Z","_duration":453,"uid":"test-00-4","cid":"0-5","title":"should display the correct vendor name for Vendor One","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor One","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-11T20:39:59.851Z","end":"2023-10-11T20:40:00.234Z","_duration":383,"uid":"test-00-5","cid":"0-5","title":"should display the correct vendor name for Vendor Six","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Six","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-11T20:40:00.235Z","end":"2023-10-11T20:40:00.674Z","_duration":439,"uid":"test-00-6","cid":"0-5","title":"should return the correct unique invoice count for Vendor Three","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Three","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-11T20:40:00.674Z","end":"2023-10-11T20:40:01.015Z","_duration":341,"uid":"test-00-7","cid":"0-5","title":"should return the correct unique invoice count for Vendor Five","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Five","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-11T20:40:01.015Z","end":"2023-10-11T20:40:01.682Z","_duration":667,"uid":"test-00-8","cid":"0-5","title":"should return the correct unique invoice count for Vendor Four","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Four","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-11T20:40:01.683Z","end":"2023-10-11T20:40:02.219Z","_duration":536,"uid":"test-00-9","cid":"0-5","title":"should return the correct unique invoice count for Vendor Two","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Two","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-11T20:40:02.225Z","end":"2023-10-11T20:40:02.613Z","_duration":388,"uid":"test-00-10","cid":"0-5","title":"should return the correct unique invoice count for Vendor One","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor One","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-11T20:40:02.620Z","end":"2023-10-11T20:40:02.994Z","_duration":374,"uid":"test-00-11","cid":"0-5","title":"should return the correct unique invoice count for Vendor Six","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Six","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0}],"hooks":[],"suites":[],"parent":"","hooksAndTests":[{"type":"test","start":"2023-10-11T20:39:50.359Z","end":"2023-10-11T20:39:57.680Z","_duration":7321,"uid":"test-00-0","cid":"0-5","title":"should display the correct vendor name for Vendor Three","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Three","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-11T20:39:57.681Z","end":"2023-10-11T20:39:58.183Z","_duration":502,"uid":"test-00-1","cid":"0-5","title":"should display the correct vendor name for Vendor Five","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Five","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-11T20:39:58.184Z","end":"2023-10-11T20:39:58.646Z","_duration":462,"uid":"test-00-2","cid":"0-5","title":"should display the correct vendor name for Vendor Four","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Four","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-11T20:39:58.647Z","end":"2023-10-11T20:39:59.397Z","_duration":750,"uid":"test-00-3","cid":"0-5","title":"should display the correct vendor name for Vendor Two","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Two","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-11T20:39:59.398Z","end":"2023-10-11T20:39:59.851Z","_duration":453,"uid":"test-00-4","cid":"0-5","title":"should display the correct vendor name for Vendor One","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor One","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-11T20:39:59.851Z","end":"2023-10-11T20:40:00.234Z","_duration":383,"uid":"test-00-5","cid":"0-5","title":"should display the correct vendor name for Vendor Six","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Six","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-11T20:40:00.235Z","end":"2023-10-11T20:40:00.674Z","_duration":439,"uid":"test-00-6","cid":"0-5","title":"should return the correct unique invoice count for Vendor Three","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Three","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-11T20:40:00.674Z","end":"2023-10-11T20:40:01.015Z","_duration":341,"uid":"test-00-7","cid":"0-5","title":"should return the correct unique invoice count for Vendor Five","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Five","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-11T20:40:01.015Z","end":"2023-10-11T20:40:01.682Z","_duration":667,"uid":"test-00-8","cid":"0-5","title":"should return the correct unique invoice count for Vendor Four","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Four","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-11T20:40:01.683Z","end":"2023-10-11T20:40:02.219Z","_duration":536,"uid":"test-00-9","cid":"0-5","title":"should return the correct unique invoice count for Vendor Two","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Two","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-11T20:40:02.225Z","end":"2023-10-11T20:40:02.613Z","_duration":388,"uid":"test-00-10","cid":"0-5","title":"should return the correct unique invoice count for Vendor One","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor One","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-11T20:40:02.620Z","end":"2023-10-11T20:40:02.994Z","_duration":374,"uid":"test-00-11","cid":"0-5","title":"should return the correct unique invoice count for Vendor Six","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Six","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0}]}],"reportFile":"/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/reports/uiHtmlReports/report-0-5.html","browserName":"not specified"}