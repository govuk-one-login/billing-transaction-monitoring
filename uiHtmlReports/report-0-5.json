{"info":{"type":"runner","start":"2023-09-27T08:48:02.354Z","end":"2023-09-27T08:48:15.491Z","_duration":13137,"cid":"0-5","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"117.0.5938.88","chrome":{"chromedriverVersion":"116.0.5845.96 (1a391816688002153ef791ffe60d9e899a71a037-refs/branch-heads/5845@{#1382})","userDataDir":"/tmp/.org.chromium.Chromium.bBulYt"},"fedcm:accounts":true,"goog:chromeOptions":{"debuggerAddress":"localhost:40055"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:extension:minPinLength":true,"webauthn:extension:prf":true,"webauthn:virtualAuthenticators":true,"sessionId":"f291e40738e3b9e4f9709897cb2016c1"},"sanitizedCapabilities":"chrome.117_0_5938_88.linux","config":{"protocol":"http","hostname":"localhost","port":9515,"path":"/","capabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--disable-dev-shm-usage","--disable-gpu","--no-sandbox"]}},"logLevel":"error","connectionRetryTimeout":120000,"connectionRetryCount":3,"logLevels":{},"enableDirectConnect":true,"strictSSL":true,"requestedCapabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--disable-dev-shm-usage","--disable-gpu","--no-sandbox"]}},"specs":["./ui-tests/specs/**/*.spec.ts"],"exclude":[],"suites":{},"rootDir":"/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring","baseUrl":"https://pr-489.btm.dev.account.gov.uk","bail":0,"waitforInterval":500,"waitforTimeout":10000,"framework":"mocha","reporters":["spec",["junit",{"outputDir":"./ui-tests/reports/junitReports"}],[null,{"outputDir":"./ui-tests/reports/uiHtmlReports"}]],"services":["chromedriver"],"execArgv":[],"maxInstances":10,"maxInstancesPerCapability":100,"injectGlobals":true,"specFileRetries":0,"specFileRetriesDelay":0,"specFileRetriesDeferred":false,"filesToWatch":[],"onPrepare":[null],"onWorkerStart":[],"onWorkerEnd":[],"before":[],"beforeSession":[],"beforeSuite":[],"beforeHook":[],"beforeTest":[],"beforeCommand":[],"afterCommand":[],"afterTest":[],"afterHook":[],"afterSuite":[],"afterSession":[],"after":[],"onComplete":[null],"onReload":[],"automationProtocol":"webdriver"},"specs":["file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts"],"sessionId":"f291e40738e3b9e4f9709897cb2016c1","isMultiremote":false,"instanceOptions":{"f291e40738e3b9e4f9709897cb2016c1":{"protocol":"http","hostname":"localhost","port":9515,"path":"/","capabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--disable-dev-shm-usage","--disable-gpu","--no-sandbox"]}},"logLevel":"error","connectionRetryTimeout":120000,"connectionRetryCount":3,"logLevels":{},"enableDirectConnect":true,"strictSSL":true,"requestedCapabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--disable-dev-shm-usage","--disable-gpu","--no-sandbox"]}},"specs":["./ui-tests/specs/**/*.spec.ts"],"exclude":[],"suites":{},"rootDir":"/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring","baseUrl":"https://pr-489.btm.dev.account.gov.uk","bail":0,"waitforInterval":500,"waitforTimeout":10000,"framework":"mocha","reporters":["spec",["junit",{"outputDir":"./ui-tests/reports/junitReports"}],[null,{"outputDir":"./ui-tests/reports/uiHtmlReports"}]],"services":["chromedriver"],"execArgv":[],"maxInstances":10,"maxInstancesPerCapability":100,"injectGlobals":true,"specFileRetries":0,"specFileRetriesDelay":0,"specFileRetriesDeferred":false,"filesToWatch":[],"onPrepare":[null],"onWorkerStart":[],"onWorkerEnd":[],"before":[],"beforeSession":[],"beforeSuite":[],"beforeHook":[],"beforeTest":[],"beforeCommand":[],"afterCommand":[],"afterTest":[],"afterHook":[],"afterSuite":[],"afterSession":[],"after":[],"onComplete":[null],"onReload":[],"automationProtocol":"webdriver"}},"retry":0,"failures":0,"retries":0},"metrics":{"passed":12,"skipped":0,"failed":0,"duration":13137,"start":"2023-09-27T08:48:02.354Z","end":"2023-09-27T08:48:15Z"},"title":"Test Report Title","suites":[{"type":"suite:start","start":"2023-09-27T08:48:02.394Z","end":"2023-09-27T08:48:15.424Z","_duration":13029,"uid":"suite-0-0","cid":"0-5","file":"/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts","title":"InvoicesList Page","fullTitle":"InvoicesList Page","tests":[{"type":"test","start":"2023-09-27T08:48:02.394Z","end":"2023-09-27T08:48:06.812Z","_duration":4418,"uid":"test-00-0","cid":"0-5","title":"should display the correct vendor name for Vendor Three","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Three","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-09-27T08:48:06.813Z","end":"2023-09-27T08:48:07.397Z","_duration":584,"uid":"test-00-1","cid":"0-5","title":"should display the correct vendor name for Vendor Five","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Five","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-09-27T08:48:07.397Z","end":"2023-09-27T08:48:07.979Z","_duration":582,"uid":"test-00-2","cid":"0-5","title":"should display the correct vendor name for Vendor Four","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Four","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-09-27T08:48:07.980Z","end":"2023-09-27T08:48:10.509Z","_duration":2529,"uid":"test-00-3","cid":"0-5","title":"should display the correct vendor name for Vendor Two","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Two","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-09-27T08:48:10.509Z","end":"2023-09-27T08:48:11.081Z","_duration":572,"uid":"test-00-4","cid":"0-5","title":"should display the correct vendor name for Vendor One","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor One","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-09-27T08:48:11.082Z","end":"2023-09-27T08:48:11.642Z","_duration":560,"uid":"test-00-5","cid":"0-5","title":"should display the correct vendor name for Vendor Six","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Six","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-09-27T08:48:11.643Z","end":"2023-09-27T08:48:12.328Z","_duration":685,"uid":"test-00-6","cid":"0-5","title":"should return the correct unique invoice count for Vendor Three","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Three","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-09-27T08:48:12.329Z","end":"2023-09-27T08:48:12.860Z","_duration":531,"uid":"test-00-7","cid":"0-5","title":"should return the correct unique invoice count for Vendor Five","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Five","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-09-27T08:48:12.860Z","end":"2023-09-27T08:48:13.377Z","_duration":517,"uid":"test-00-8","cid":"0-5","title":"should return the correct unique invoice count for Vendor Four","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Four","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-09-27T08:48:13.377Z","end":"2023-09-27T08:48:14.166Z","_duration":789,"uid":"test-00-9","cid":"0-5","title":"should return the correct unique invoice count for Vendor Two","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Two","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-09-27T08:48:14.167Z","end":"2023-09-27T08:48:14.681Z","_duration":514,"uid":"test-00-10","cid":"0-5","title":"should return the correct unique invoice count for Vendor One","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor One","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-09-27T08:48:14.687Z","end":"2023-09-27T08:48:15.422Z","_duration":735,"uid":"test-00-11","cid":"0-5","title":"should return the correct unique invoice count for Vendor Six","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Six","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0}],"hooks":[],"suites":[],"parent":"","hooksAndTests":[{"type":"test","start":"2023-09-27T08:48:02.394Z","end":"2023-09-27T08:48:06.812Z","_duration":4418,"uid":"test-00-0","cid":"0-5","title":"should display the correct vendor name for Vendor Three","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Three","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-09-27T08:48:06.813Z","end":"2023-09-27T08:48:07.397Z","_duration":584,"uid":"test-00-1","cid":"0-5","title":"should display the correct vendor name for Vendor Five","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Five","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-09-27T08:48:07.397Z","end":"2023-09-27T08:48:07.979Z","_duration":582,"uid":"test-00-2","cid":"0-5","title":"should display the correct vendor name for Vendor Four","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Four","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-09-27T08:48:07.980Z","end":"2023-09-27T08:48:10.509Z","_duration":2529,"uid":"test-00-3","cid":"0-5","title":"should display the correct vendor name for Vendor Two","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Two","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-09-27T08:48:10.509Z","end":"2023-09-27T08:48:11.081Z","_duration":572,"uid":"test-00-4","cid":"0-5","title":"should display the correct vendor name for Vendor One","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor One","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-09-27T08:48:11.082Z","end":"2023-09-27T08:48:11.642Z","_duration":560,"uid":"test-00-5","cid":"0-5","title":"should display the correct vendor name for Vendor Six","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Six","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-09-27T08:48:11.643Z","end":"2023-09-27T08:48:12.328Z","_duration":685,"uid":"test-00-6","cid":"0-5","title":"should return the correct unique invoice count for Vendor Three","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Three","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-09-27T08:48:12.329Z","end":"2023-09-27T08:48:12.860Z","_duration":531,"uid":"test-00-7","cid":"0-5","title":"should return the correct unique invoice count for Vendor Five","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Five","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-09-27T08:48:12.860Z","end":"2023-09-27T08:48:13.377Z","_duration":517,"uid":"test-00-8","cid":"0-5","title":"should return the correct unique invoice count for Vendor Four","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Four","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-09-27T08:48:13.377Z","end":"2023-09-27T08:48:14.166Z","_duration":789,"uid":"test-00-9","cid":"0-5","title":"should return the correct unique invoice count for Vendor Two","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Two","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-09-27T08:48:14.167Z","end":"2023-09-27T08:48:14.681Z","_duration":514,"uid":"test-00-10","cid":"0-5","title":"should return the correct unique invoice count for Vendor One","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor One","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-09-27T08:48:14.687Z","end":"2023-09-27T08:48:15.422Z","_duration":735,"uid":"test-00-11","cid":"0-5","title":"should return the correct unique invoice count for Vendor Six","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Six","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0}]}],"reportFile":"/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/reports/uiHtmlReports/report-0-5.html","browserName":"not specified"}