{"info":{"type":"runner","start":"2023-11-15T12:09:23.622Z","end":"2023-11-15T12:09:37.261Z","_duration":13639,"cid":"0-5","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"118.0.5993.117","chrome":{"chromedriverVersion":"118.0.5993.70 (e52f33f30b91b4ddfad649acddc39ab570473b86-refs/branch-heads/5993@{#1216})","userDataDir":"/tmp/.org.chromium.Chromium.dhOEND"},"fedcm:accounts":true,"goog:chromeOptions":{"debuggerAddress":"localhost:38723"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:extension:minPinLength":true,"webauthn:extension:prf":true,"webauthn:virtualAuthenticators":true,"sessionId":"ef68722bfbf35325018add7fd43bb705"},"sanitizedCapabilities":"chrome.118_0_5993_117.linux","config":{"protocol":"http","hostname":"localhost","port":9515,"path":"/","capabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--disable-dev-shm-usage","--disable-gpu","--no-sandbox"]}},"logLevel":"error","connectionRetryTimeout":120000,"connectionRetryCount":3,"logLevels":{},"enableDirectConnect":true,"strictSSL":true,"requestedCapabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--disable-dev-shm-usage","--disable-gpu","--no-sandbox"]}},"specs":["./ui-tests/specs/**/*.spec.ts"],"exclude":[],"suites":{},"rootDir":"/home/runner/work/billing-transaction-monitoring/billing-transaction-monitoring","baseUrl":"https://pr-519.btm.dev.account.gov.uk","bail":0,"waitforInterval":500,"waitforTimeout":10000,"framework":"mocha","reporters":["spec",["junit",{"outputDir":"./ui-tests/reports/junitReports"}],[null,{"outputDir":"./ui-tests/reports/uiHtmlReports"}]],"services":["chromedriver"],"execArgv":[],"maxInstances":10,"maxInstancesPerCapability":100,"injectGlobals":true,"specFileRetries":0,"specFileRetriesDelay":0,"specFileRetriesDeferred":false,"filesToWatch":[],"onPrepare":[null],"onWorkerStart":[],"onWorkerEnd":[],"before":[],"beforeSession":[],"beforeSuite":[],"beforeHook":[],"beforeTest":[],"beforeCommand":[],"afterCommand":[],"afterTest":[],"afterHook":[],"afterSuite":[],"afterSession":[],"after":[],"onComplete":[null],"onReload":[],"automationProtocol":"webdriver"},"specs":["file:///home/runner/work/billing-transaction-monitoring/billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts"],"sessionId":"ef68722bfbf35325018add7fd43bb705","isMultiremote":false,"instanceOptions":{"ef68722bfbf35325018add7fd43bb705":{"protocol":"http","hostname":"localhost","port":9515,"path":"/","capabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--disable-dev-shm-usage","--disable-gpu","--no-sandbox"]}},"logLevel":"error","connectionRetryTimeout":120000,"connectionRetryCount":3,"logLevels":{},"enableDirectConnect":true,"strictSSL":true,"requestedCapabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--disable-dev-shm-usage","--disable-gpu","--no-sandbox"]}},"specs":["./ui-tests/specs/**/*.spec.ts"],"exclude":[],"suites":{},"rootDir":"/home/runner/work/billing-transaction-monitoring/billing-transaction-monitoring","baseUrl":"https://pr-519.btm.dev.account.gov.uk","bail":0,"waitforInterval":500,"waitforTimeout":10000,"framework":"mocha","reporters":["spec",["junit",{"outputDir":"./ui-tests/reports/junitReports"}],[null,{"outputDir":"./ui-tests/reports/uiHtmlReports"}]],"services":["chromedriver"],"execArgv":[],"maxInstances":10,"maxInstancesPerCapability":100,"injectGlobals":true,"specFileRetries":0,"specFileRetriesDelay":0,"specFileRetriesDeferred":false,"filesToWatch":[],"onPrepare":[null],"onWorkerStart":[],"onWorkerEnd":[],"before":[],"beforeSession":[],"beforeSuite":[],"beforeHook":[],"beforeTest":[],"beforeCommand":[],"afterCommand":[],"afterTest":[],"afterHook":[],"afterSuite":[],"afterSession":[],"after":[],"onComplete":[null],"onReload":[],"automationProtocol":"webdriver"}},"retry":0,"failures":0,"retries":0},"metrics":{"passed":12,"skipped":0,"failed":0,"duration":13639,"start":"2023-11-15T12:09:23.623Z","end":"2023-11-15T12:09:37Z"},"title":"Test Report Title","suites":[{"type":"suite:start","start":"2023-11-15T12:09:23.645Z","end":"2023-11-15T12:09:37.198Z","_duration":13552,"uid":"suite-0-0","cid":"0-5","file":"/home/runner/work/billing-transaction-monitoring/billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts","title":"InvoicesList Page","fullTitle":"InvoicesList Page","tests":[{"type":"test","start":"2023-11-15T12:09:23.646Z","end":"2023-11-15T12:09:31.327Z","_duration":7681,"uid":"test-00-0","cid":"0-5","title":"should display the correct vendor name for Vendor Three","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Three","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-11-15T12:09:31.327Z","end":"2023-11-15T12:09:32.218Z","_duration":891,"uid":"test-00-1","cid":"0-5","title":"should display the correct vendor name for Vendor Five","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Five","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-11-15T12:09:32.218Z","end":"2023-11-15T12:09:32.712Z","_duration":494,"uid":"test-00-2","cid":"0-5","title":"should display the correct vendor name for Vendor Four","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Four","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-11-15T12:09:32.713Z","end":"2023-11-15T12:09:33.170Z","_duration":457,"uid":"test-00-3","cid":"0-5","title":"should display the correct vendor name for Vendor Two","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Two","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-11-15T12:09:33.171Z","end":"2023-11-15T12:09:34.038Z","_duration":867,"uid":"test-00-4","cid":"0-5","title":"should display the correct vendor name for Vendor One","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor One","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-11-15T12:09:34.038Z","end":"2023-11-15T12:09:34.421Z","_duration":383,"uid":"test-00-5","cid":"0-5","title":"should display the correct vendor name for Vendor Six","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Six","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-11-15T12:09:34.421Z","end":"2023-11-15T12:09:35.331Z","_duration":910,"uid":"test-00-6","cid":"0-5","title":"should return the correct unique invoice count for Vendor Three","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Three","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-11-15T12:09:35.331Z","end":"2023-11-15T12:09:35.701Z","_duration":370,"uid":"test-00-7","cid":"0-5","title":"should return the correct unique invoice count for Vendor Five","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Five","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-11-15T12:09:35.701Z","end":"2023-11-15T12:09:36.059Z","_duration":358,"uid":"test-00-8","cid":"0-5","title":"should return the correct unique invoice count for Vendor Four","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Four","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-11-15T12:09:36.060Z","end":"2023-11-15T12:09:36.431Z","_duration":371,"uid":"test-00-9","cid":"0-5","title":"should return the correct unique invoice count for Vendor Two","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Two","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-11-15T12:09:36.431Z","end":"2023-11-15T12:09:36.853Z","_duration":422,"uid":"test-00-10","cid":"0-5","title":"should return the correct unique invoice count for Vendor One","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor One","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-11-15T12:09:36.854Z","end":"2023-11-15T12:09:37.196Z","_duration":342,"uid":"test-00-11","cid":"0-5","title":"should return the correct unique invoice count for Vendor Six","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Six","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0}],"hooks":[],"suites":[],"parent":"","hooksAndTests":[{"type":"test","start":"2023-11-15T12:09:23.646Z","end":"2023-11-15T12:09:31.327Z","_duration":7681,"uid":"test-00-0","cid":"0-5","title":"should display the correct vendor name for Vendor Three","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Three","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-11-15T12:09:31.327Z","end":"2023-11-15T12:09:32.218Z","_duration":891,"uid":"test-00-1","cid":"0-5","title":"should display the correct vendor name for Vendor Five","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Five","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-11-15T12:09:32.218Z","end":"2023-11-15T12:09:32.712Z","_duration":494,"uid":"test-00-2","cid":"0-5","title":"should display the correct vendor name for Vendor Four","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Four","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-11-15T12:09:32.713Z","end":"2023-11-15T12:09:33.170Z","_duration":457,"uid":"test-00-3","cid":"0-5","title":"should display the correct vendor name for Vendor Two","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Two","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-11-15T12:09:33.171Z","end":"2023-11-15T12:09:34.038Z","_duration":867,"uid":"test-00-4","cid":"0-5","title":"should display the correct vendor name for Vendor One","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor One","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-11-15T12:09:34.038Z","end":"2023-11-15T12:09:34.421Z","_duration":383,"uid":"test-00-5","cid":"0-5","title":"should display the correct vendor name for Vendor Six","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Six","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-11-15T12:09:34.421Z","end":"2023-11-15T12:09:35.331Z","_duration":910,"uid":"test-00-6","cid":"0-5","title":"should return the correct unique invoice count for Vendor Three","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Three","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-11-15T12:09:35.331Z","end":"2023-11-15T12:09:35.701Z","_duration":370,"uid":"test-00-7","cid":"0-5","title":"should return the correct unique invoice count for Vendor Five","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Five","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-11-15T12:09:35.701Z","end":"2023-11-15T12:09:36.059Z","_duration":358,"uid":"test-00-8","cid":"0-5","title":"should return the correct unique invoice count for Vendor Four","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Four","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-11-15T12:09:36.060Z","end":"2023-11-15T12:09:36.431Z","_duration":371,"uid":"test-00-9","cid":"0-5","title":"should return the correct unique invoice count for Vendor Two","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Two","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-11-15T12:09:36.431Z","end":"2023-11-15T12:09:36.853Z","_duration":422,"uid":"test-00-10","cid":"0-5","title":"should return the correct unique invoice count for Vendor One","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor One","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-11-15T12:09:36.854Z","end":"2023-11-15T12:09:37.196Z","_duration":342,"uid":"test-00-11","cid":"0-5","title":"should return the correct unique invoice count for Vendor Six","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Six","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[],"errorIndex":0}]}],"reportFile":"/home/runner/work/billing-transaction-monitoring/billing-transaction-monitoring/ui-tests/reports/uiHtmlReports/report-0-5.html","browserName":"not specified"}