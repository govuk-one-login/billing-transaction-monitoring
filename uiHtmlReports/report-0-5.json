{"info":{"type":"runner","start":"2023-10-12T08:05:39.859Z","end":"2023-10-12T08:05:48.658Z","_duration":8799,"cid":"0-5","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"117.0.5938.132","chrome":{"chromedriverVersion":"116.0.5845.96 (1a391816688002153ef791ffe60d9e899a71a037-refs/branch-heads/5845@{#1382})","userDataDir":"/tmp/.org.chromium.Chromium.jEayto"},"fedcm:accounts":true,"goog:chromeOptions":{"debuggerAddress":"localhost:41729"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:extension:minPinLength":true,"webauthn:extension:prf":true,"webauthn:virtualAuthenticators":true,"sessionId":"4ad854001024d8853362ac9c3738c21e"},"sanitizedCapabilities":"chrome.117_0_5938_132.linux","config":{"protocol":"http","hostname":"localhost","port":9515,"path":"/","capabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--disable-dev-shm-usage","--disable-gpu","--no-sandbox"]}},"logLevel":"error","connectionRetryTimeout":120000,"connectionRetryCount":3,"logLevels":{},"enableDirectConnect":true,"strictSSL":true,"requestedCapabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--disable-dev-shm-usage","--disable-gpu","--no-sandbox"]}},"specs":["./ui-tests/specs/**/*.spec.ts"],"exclude":[],"suites":{},"rootDir":"/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring","baseUrl":"https://pr-509.btm.dev.account.gov.uk","bail":0,"waitforInterval":500,"waitforTimeout":10000,"framework":"mocha","reporters":["spec",["junit",{"outputDir":"./ui-tests/reports/junitReports"}],[null,{"outputDir":"./ui-tests/reports/uiHtmlReports"}]],"services":["chromedriver"],"execArgv":[],"maxInstances":10,"maxInstancesPerCapability":100,"injectGlobals":true,"specFileRetries":0,"specFileRetriesDelay":0,"specFileRetriesDeferred":false,"filesToWatch":[],"onPrepare":[null],"onWorkerStart":[],"onWorkerEnd":[],"before":[],"beforeSession":[],"beforeSuite":[],"beforeHook":[],"beforeTest":[],"beforeCommand":[],"afterCommand":[],"afterTest":[],"afterHook":[],"afterSuite":[],"afterSession":[],"after":[],"onComplete":[null],"onReload":[],"automationProtocol":"webdriver"},"specs":["file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts"],"sessionId":"4ad854001024d8853362ac9c3738c21e","isMultiremote":false,"instanceOptions":{"4ad854001024d8853362ac9c3738c21e":{"protocol":"http","hostname":"localhost","port":9515,"path":"/","capabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--disable-dev-shm-usage","--disable-gpu","--no-sandbox"]}},"logLevel":"error","connectionRetryTimeout":120000,"connectionRetryCount":3,"logLevels":{},"enableDirectConnect":true,"strictSSL":true,"requestedCapabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--disable-dev-shm-usage","--disable-gpu","--no-sandbox"]}},"specs":["./ui-tests/specs/**/*.spec.ts"],"exclude":[],"suites":{},"rootDir":"/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring","baseUrl":"https://pr-509.btm.dev.account.gov.uk","bail":0,"waitforInterval":500,"waitforTimeout":10000,"framework":"mocha","reporters":["spec",["junit",{"outputDir":"./ui-tests/reports/junitReports"}],[null,{"outputDir":"./ui-tests/reports/uiHtmlReports"}]],"services":["chromedriver"],"execArgv":[],"maxInstances":10,"maxInstancesPerCapability":100,"injectGlobals":true,"specFileRetries":0,"specFileRetriesDelay":0,"specFileRetriesDeferred":false,"filesToWatch":[],"onPrepare":[null],"onWorkerStart":[],"onWorkerEnd":[],"before":[],"beforeSession":[],"beforeSuite":[],"beforeHook":[],"beforeTest":[],"beforeCommand":[],"afterCommand":[],"afterTest":[],"afterHook":[],"afterSuite":[],"afterSession":[],"after":[],"onComplete":[null],"onReload":[],"automationProtocol":"webdriver"}},"retry":0,"failures":6,"retries":0},"metrics":{"passed":6,"skipped":0,"failed":6,"duration":8799,"start":"2023-10-12T08:05:39.859Z","end":"2023-10-12T08:05:48Z"},"title":"Test Report Title","suites":[{"type":"suite:start","start":"2023-10-12T08:05:39.910Z","end":"2023-10-12T08:05:48.554Z","_duration":8643,"uid":"suite-0-0","cid":"0-5","file":"/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts","title":"InvoicesList Page","fullTitle":"InvoicesList Page","tests":[{"type":"test","start":"2023-10-12T08:05:39.911Z","end":"2023-10-12T08:05:42.542Z","_duration":2631,"uid":"test-00-0","cid":"0-5","title":"should display the correct vendor name for Vendor Three","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Three","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-12T08:05:42.543Z","end":"2023-10-12T08:05:43.822Z","_duration":1279,"uid":"test-00-1","cid":"0-5","title":"should display the correct vendor name for Vendor Five","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Five","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-12T08:05:43.822Z","end":"2023-10-12T08:05:44.235Z","_duration":413,"uid":"test-00-2","cid":"0-5","title":"should display the correct vendor name for Vendor Four","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Four","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-12T08:05:44.235Z","end":"2023-10-12T08:05:45.030Z","_duration":795,"uid":"test-00-3","cid":"0-5","title":"should display the correct vendor name for Vendor Two","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Two","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-12T08:05:45.031Z","end":"2023-10-12T08:05:45.710Z","_duration":679,"uid":"test-00-4","cid":"0-5","title":"should display the correct vendor name for Vendor One","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor One","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-12T08:05:45.713Z","end":"2023-10-12T08:05:46.058Z","_duration":345,"uid":"test-00-5","cid":"0-5","title":"should display the correct vendor name for Vendor Six","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Six","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-12T08:05:46.058Z","end":"2023-10-12T08:05:46.485Z","_duration":427,"uid":"test-00-6","cid":"0-5","title":"should return the correct unique invoice count for Vendor Three","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Three","output":[],"retries":0,"parent":"InvoicesList Page","state":"failed","errors":[{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 3","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m3\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}],"error":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 3","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m3\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"},"body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[{"type":"Error","value":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 3","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m3\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}}],"errorIndex":1},{"type":"test","start":"2023-10-12T08:05:46.486Z","end":"2023-10-12T08:05:46.855Z","_duration":369,"uid":"test-00-7","cid":"0-5","title":"should return the correct unique invoice count for Vendor Five","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Five","output":[],"retries":0,"parent":"InvoicesList Page","state":"failed","errors":[{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 3","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m3\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}],"error":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 3","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m3\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"},"body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[{"type":"Error","value":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 3","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m3\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}}],"errorIndex":1},{"type":"test","start":"2023-10-12T08:05:46.861Z","end":"2023-10-12T08:05:47.230Z","_duration":369,"uid":"test-00-8","cid":"0-5","title":"should return the correct unique invoice count for Vendor Four","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Four","output":[],"retries":0,"parent":"InvoicesList Page","state":"failed","errors":[{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 3","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m3\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}],"error":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 3","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m3\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"},"body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[{"type":"Error","value":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 3","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m3\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}}],"errorIndex":1},{"type":"test","start":"2023-10-12T08:05:47.230Z","end":"2023-10-12T08:05:47.638Z","_duration":408,"uid":"test-00-9","cid":"0-5","title":"should return the correct unique invoice count for Vendor Two","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Two","output":[],"retries":0,"parent":"InvoicesList Page","state":"failed","errors":[{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 1","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m1\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}],"error":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 1","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m1\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"},"body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[{"type":"Error","value":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 1","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m1\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}}],"errorIndex":1},{"type":"test","start":"2023-10-12T08:05:47.638Z","end":"2023-10-12T08:05:48.151Z","_duration":513,"uid":"test-00-10","cid":"0-5","title":"should return the correct unique invoice count for Vendor One","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor One","output":[],"retries":0,"parent":"InvoicesList Page","state":"failed","errors":[{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 4\nReceived: 8","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m4\u001b[39m\nReceived: \u001b[31m8\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}],"error":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 4\nReceived: 8","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m4\u001b[39m\nReceived: \u001b[31m8\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"},"body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[{"type":"Error","value":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 4\nReceived: 8","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m4\u001b[39m\nReceived: \u001b[31m8\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}}],"errorIndex":1},{"type":"test","start":"2023-10-12T08:05:48.152Z","end":"2023-10-12T08:05:48.553Z","_duration":401,"uid":"test-00-11","cid":"0-5","title":"should return the correct unique invoice count for Vendor Six","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Six","output":[],"retries":0,"parent":"InvoicesList Page","state":"failed","errors":[{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 0\nReceived: 1","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m0\u001b[39m\nReceived: \u001b[31m1\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}],"error":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 0\nReceived: 1","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m0\u001b[39m\nReceived: \u001b[31m1\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"},"body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[{"type":"Error","value":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 0\nReceived: 1","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m0\u001b[39m\nReceived: \u001b[31m1\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}}],"errorIndex":1}],"hooks":[],"suites":[],"parent":"","hooksAndTests":[{"type":"test","start":"2023-10-12T08:05:39.911Z","end":"2023-10-12T08:05:42.542Z","_duration":2631,"uid":"test-00-0","cid":"0-5","title":"should display the correct vendor name for Vendor Three","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Three","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-12T08:05:42.543Z","end":"2023-10-12T08:05:43.822Z","_duration":1279,"uid":"test-00-1","cid":"0-5","title":"should display the correct vendor name for Vendor Five","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Five","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-12T08:05:43.822Z","end":"2023-10-12T08:05:44.235Z","_duration":413,"uid":"test-00-2","cid":"0-5","title":"should display the correct vendor name for Vendor Four","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Four","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-12T08:05:44.235Z","end":"2023-10-12T08:05:45.030Z","_duration":795,"uid":"test-00-3","cid":"0-5","title":"should display the correct vendor name for Vendor Two","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Two","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-12T08:05:45.031Z","end":"2023-10-12T08:05:45.710Z","_duration":679,"uid":"test-00-4","cid":"0-5","title":"should display the correct vendor name for Vendor One","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor One","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-12T08:05:45.713Z","end":"2023-10-12T08:05:46.058Z","_duration":345,"uid":"test-00-5","cid":"0-5","title":"should display the correct vendor name for Vendor Six","fullTitle":"InvoicesList Page.should display the correct vendor name for Vendor Six","output":[],"retries":0,"parent":"InvoicesList Page","state":"passed","body":"async () => {\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const uiVendorName = await InvoicesListPage.getPageSubHeadingText();\n                expect(uiVendorName).toContain(`${vendor}`);\n            }\n        }","events":[],"errorIndex":0},{"type":"test","start":"2023-10-12T08:05:46.058Z","end":"2023-10-12T08:05:46.485Z","_duration":427,"uid":"test-00-6","cid":"0-5","title":"should return the correct unique invoice count for Vendor Three","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Three","output":[],"retries":0,"parent":"InvoicesList Page","state":"failed","errors":[{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 3","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m3\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}],"error":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 3","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m3\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"},"body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[{"type":"Error","value":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 3","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m3\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}}],"errorIndex":1},{"type":"test","start":"2023-10-12T08:05:46.486Z","end":"2023-10-12T08:05:46.855Z","_duration":369,"uid":"test-00-7","cid":"0-5","title":"should return the correct unique invoice count for Vendor Five","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Five","output":[],"retries":0,"parent":"InvoicesList Page","state":"failed","errors":[{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 3","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m3\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}],"error":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 3","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m3\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"},"body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[{"type":"Error","value":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 3","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m3\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}}],"errorIndex":1},{"type":"test","start":"2023-10-12T08:05:46.861Z","end":"2023-10-12T08:05:47.230Z","_duration":369,"uid":"test-00-8","cid":"0-5","title":"should return the correct unique invoice count for Vendor Four","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Four","output":[],"retries":0,"parent":"InvoicesList Page","state":"failed","errors":[{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 3","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m3\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}],"error":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 3","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m3\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"},"body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[{"type":"Error","value":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 3","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m3\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}}],"errorIndex":1},{"type":"test","start":"2023-10-12T08:05:47.230Z","end":"2023-10-12T08:05:47.638Z","_duration":408,"uid":"test-00-9","cid":"0-5","title":"should return the correct unique invoice count for Vendor Two","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Two","output":[],"retries":0,"parent":"InvoicesList Page","state":"failed","errors":[{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 1","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m1\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}],"error":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 1","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m1\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"},"body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[{"type":"Error","value":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 2\nReceived: 1","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m1\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}}],"errorIndex":1},{"type":"test","start":"2023-10-12T08:05:47.638Z","end":"2023-10-12T08:05:48.151Z","_duration":513,"uid":"test-00-10","cid":"0-5","title":"should return the correct unique invoice count for Vendor One","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor One","output":[],"retries":0,"parent":"InvoicesList Page","state":"failed","errors":[{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 4\nReceived: 8","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m4\u001b[39m\nReceived: \u001b[31m8\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}],"error":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 4\nReceived: 8","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m4\u001b[39m\nReceived: \u001b[31m8\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"},"body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[{"type":"Error","value":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 4\nReceived: 8","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m4\u001b[39m\nReceived: \u001b[31m8\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}}],"errorIndex":1},{"type":"test","start":"2023-10-12T08:05:48.152Z","end":"2023-10-12T08:05:48.553Z","_duration":401,"uid":"test-00-11","cid":"0-5","title":"should return the correct unique invoice count for Vendor Six","fullTitle":"InvoicesList Page.should return the correct unique invoice count for Vendor Six","output":[],"retries":0,"parent":"InvoicesList Page","state":"failed","errors":[{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 0\nReceived: 1","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m0\u001b[39m\nReceived: \u001b[31m1\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}],"error":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 0\nReceived: 1","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m0\u001b[39m\nReceived: \u001b[31m1\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"},"body":"async () => {\n            const { count } = getUniqueInvoiceMonthsYearsByVendor(vendor);\n            const vendorIds = getUniqueVendorIdsFromJson(vendor);\n            for (const vendorId of vendorIds) {\n                const contractId = await getVendorContractIdFromConfig(vendorId);\n                await InvoicesListPage.open(`contracts/${contractId}/invoices`);\n                await waitForPageLoad();\n                const invoiceCountFromUI = await InvoicesListPage.getInvoiceCount();\n                expect(count).toEqual(invoiceCountFromUI);\n            }\n        }","events":[{"type":"Error","value":{"name":"Error","message":"expect(received).toEqual(expected) // deep equality\n\nExpected: 0\nReceived: 1","stack":"Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m0\u001b[39m\nReceived: \u001b[31m1\u001b[39m\n    at Context.<anonymous> (file:///home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/specs/invoicesList.spec.ts:39:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","type":"Error"}}],"errorIndex":1}]}],"reportFile":"/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/ui-tests/reports/uiHtmlReports/report-0-5.html","browserName":"not specified"}