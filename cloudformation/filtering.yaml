AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Resources:
  FilterQueue:
    Type: AWS::SQS::Queue
    Condition: DeployFilterQueue
    Properties:
      QueueName: !Sub ${AWS::StackName}-filter-queue
      KmsMasterKeyId: !GetAtt KmsKey.Arn
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt FilterDeadLetterQueue.Arn
        maxReceiveCount: 3

  FilterDeadLetterQueue:
    Type: AWS::SQS::Queue
    Condition: DeployFilterQueue
    Properties:
      QueueName: !Sub ${AWS::StackName}-filter-dlq
      KmsMasterKeyId: !GetAtt KmsKey.Arn

  FilterDeadLetterQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployFilterQueue
    Properties:
      AlarmName: !Sub ${AWS::StackName}-filter-dlq-alarm
      AlarmActions:
        - !GetAtt AlarmTopicParameter.Value
      Dimensions:
        - Name: QueueName
          Value: !GetAtt FilterDeadLetterQueue.QueueName
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Sum
      Period: 60
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 1
      EvaluationPeriods: 1

  FilterFunction:
    # checkov:skip=CKV_AWS_116: DLQ not needed for lambda driven by SQS
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-filter-function
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub di-btm-${Environment}-vpc-AWSServicesEndpointSecurityGroupId
        SubnetIds:
          - Fn::ImportValue: !Sub di-btm-${Environment}-vpc-PrivateSubnetIdA
          - Fn::ImportValue: !Sub di-btm-${Environment}-vpc-PrivateSubnetIdB
          - Fn::ImportValue: !Sub di-btm-${Environment}-vpc-PrivateSubnetIdC
      Environment:
        Variables:
          # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
          OUTPUT_QUEUE_URL: !Ref CleanQueue
          LOCAL_ENDPOINT:
            !If [IsLocal, 'http://localhost:4566', !Ref AWS::NoValue]
          CONFIG_BUCKET: !GetAtt ConfigStackParameter.Value
          POWERTOOLS_SERVICE_NAME: !Sub ${AWS::StackName}-filter-function
      Handler: filter.handler
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
                - sqs:ReceiveMessage
              Resource:
                - !If [
                    DeployFilterQueue,
                    !GetAtt FilterQueue.Arn,
                    !Ref AWS::NoValue,
                  ]
                - !If [
                    IsEnvForPerformanceTests,
                    !GetAtt FilterQueueForPerformanceTests.Arn,
                    !Ref AWS::NoValue,
                  ]
                - !If [
                    IsHigherEnv,
                    !Sub '{{resolve:ssm:${ConfigStackParameter.Value}-transaction-input-queue-arn}}',
                    !Ref AWS::NoValue,
                  ]
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource: !GetAtt CleanQueue.Arn
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:GenerateDataKey*
                - kms:Encrypt
              Resource:
                - !GetAtt KmsKey.Arn
                - !If [
                    IsEnvForPerformanceTests,
                    !GetAtt PerformanceTestingKmsKey.Arn,
                    !Ref AWS::NoValue,
                  ]
                - !If [
                    IsHigherEnv,
                    !Sub '{{resolve:ssm:${ConfigStackParameter.Value}-transaction-input-kms-key-arn}}',
                    !Ref AWS::NoValue,
                  ]
            - Effect: Allow
              Action: s3:GetObject
              Resource: !Sub arn:aws:s3:::${ConfigStackParameter.Value}/*
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:GenerateDataKey*
                - kms:Encrypt
              Resource: '*'
              Condition:
                ForAnyValue:StringEquals:
                  kms:ResourceAliases: !Sub alias/key-${ConfigStackParameter.Value}-general
      ReservedConcurrentExecutions: 10

  FilterFunctionEventsFromFilterQueue:
    Type: AWS::Lambda::EventSourceMapping
    Condition: DeployFilterQueue
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt FilterQueue.Arn
      FunctionName: !Ref FilterFunction
      FunctionResponseTypes:
        - ReportBatchItemFailures

  FilterFunctionEventsFromTxMAQueue:
    Type: AWS::Lambda::EventSourceMapping
    Condition: IsHigherEnv
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !Sub '{{resolve:ssm:${ConfigStackParameter.Value}-transaction-input-queue-arn}}'
      FunctionName: !Ref FilterFunction
      FunctionResponseTypes:
        - ReportBatchItemFailures

  FilterFunctionEventsFromPerformanceTestingQueue:
    Type: AWS::Lambda::EventSourceMapping
    Condition: IsEnvForPerformanceTests
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt FilterQueueForPerformanceTests.Arn
      FunctionName: !Ref FilterFunction
      FunctionResponseTypes:
        - ReportBatchItemFailures

  FilterFunctionAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-filter-function-alarm
      AlarmActions:
        - !GetAtt AlarmTopicParameter.Value
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref FilterFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0

  PerformanceTestingKmsKey:
    Condition: IsEnvForPerformanceTests
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for performance testing
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Action: kms:*
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Resource: '*'
          - Sid: Enable Access from Performance Testing Account
            Action:
              - kms:GenerateDataKey
              - kms:Decrypt
            Effect: Allow
            Principal:
              AWS: !Ref PerformanceTestingRole
            Resource: '*'

  PerformanceTestingKmsKeyAlias:
    Condition: IsEnvForPerformanceTests
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/perf-test-kms-key
      TargetKeyId: !Ref PerformanceTestingKmsKey

  FilterQueueForPerformanceTests:
    Type: AWS::SQS::Queue
    Condition: IsEnvForPerformanceTests
    Properties:
      QueueName: !Sub ${AWS::StackName}-perf-test-filter-queue
      KmsMasterKeyId: !GetAtt PerformanceTestingKmsKey.Arn
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt FilterDeadLetterQueueForPerformanceTests.Arn
        maxReceiveCount: 3

  FilterDeadLetterQueueForPerformanceTests:
    Type: AWS::SQS::Queue
    Condition: IsEnvForPerformanceTests
    Properties:
      QueueName: !Sub ${AWS::StackName}-perf-test-filter-dlq
      KmsMasterKeyId: !GetAtt KmsKey.Arn

  FilterQueueForPerformanceTestsPolicy:
    Condition: IsEnvForPerformanceTests
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowPerformanceTestAccount
            Action:
              - sqs:SendMessage
            Effect: Allow
            Principal:
              AWS: !Ref PerformanceTestingRole
            Resource:
              - !GetAtt FilterQueueForPerformanceTests.Arn
      Queues:
        - !Ref FilterQueueForPerformanceTests
