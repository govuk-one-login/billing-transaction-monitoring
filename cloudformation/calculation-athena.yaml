AWSTemplateFormatVersion: '2010-09-09'

Resources:
  CalculationsDB:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Sub ${AWS::StackName}-calculations

  TransactionTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref CalculationsDB
      TableInput:
        Name: btm_transactions_standardised
        TableType: EXTERNAL_TABLE
        Parameters:
          has_encrypted_data: true
          projection.enabled: true
          projection.datetime.type: date
          projection.datetime.range: 2022-01-01,NOW
          projection.datetime.format: yyyy-MM-dd
          projection.datetime.interval: 1
          projection.datetime.interval.unit: DAYS
          storage.location.template:
            !Join [
              '',
              ['s3://', !Ref StorageBucket, '/btm_transactions/${datetime}/'],
            ]
        PartitionKeys:
          - { Name: datetime, Type: date }
        StorageDescriptor:
          Columns:
            - Name: vendor_id
              Type: string
            - Name: event_id
              Type: string
            - Name: event_name
              Type: string
            - Name: timestamp
              Type: timestamp
            - Name: timestamp_formatted
              Type: string
            - Name: component_id
              Type: string
          Compressed: true
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Join ['', ['s3://', !Ref StorageBucket, '/']]
          StoredAsSubDirectories: false
          OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          SerdeInfo:
            Parameters:
              {
                ignore.malformed.json: true,
                serialization.format: 1,
                field.delim: '',
              }
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe

  RateTableTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref CalculationsDB
      TableInput:
        Name: btm_rates_standardised
        TableType: EXTERNAL_TABLE
        Parameters:
          has_encrypted_data: true
          storage.location.template: !Sub s3://${ConfigStackParameter.Value}/rate_tables/rates.csv
        StorageDescriptor:
          Columns:
            - Name: vendor_id
              Type: string
            - Name: event_name
              Type: string
            - Name: volumes_from
              Type: int
            - Name: volumes_to
              Type: int
            - Name: unit_price
              Type: decimal(12,4)
            - Name: effective_from
              Type: date
            - Name: effective_to
              Type: date
          Compressed: true
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Sub s3://${ConfigStackParameter.Value}/rate_tables/
          StoredAsSubDirectories: false
          OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          SerdeInfo:
            Parameters:
              field.delim: ','
              skip.header.line.count: 1
              timestamp.formats: yyyy-MM-dd
            SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  VendorServiceMappingTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref CalculationsDB
      TableInput:
        Name: btm_vendor_service_standardised
        TableType: EXTERNAL_TABLE
        Parameters:
          has_encrypted_data: true
          storage.location.template: !Sub s3://${ConfigStackParameter.Value}/vendor_services/vendor-services.csv
        StorageDescriptor:
          Columns:
            - Name: vendor_name
              Type: string
            - Name: vendor_regex
              Type: string
            - Name: vendor_id
              Type: string
            - Name: service_name
              Type: string
            - Name: service_regex
              Type: string
            - Name: event_name
              Type: string
          Compressed: true
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Sub s3://${ConfigStackParameter.Value}/vendor_services/
          StoredAsSubDirectories: false
          OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          SerdeInfo:
            Parameters:
              field.delim: ','
              skip.header.line.count: 1
            SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  TransactionsCuratedView:
    Type: Custom::AthenaView
    Properties:
      ServiceToken: !GetAtt CustomAthenaViewResourceFunction.Arn
      View:
        Database: !Ref CalculationsDB
        Name: btm_transactions_curated
        Query: |
          WITH btm_transactions_standardised_with_count
            AS (SELECT *,
                        "$path" path,
                        "COUNT"(event_id)
                          OVER (
                            PARTITION BY event_name, vendor_id, "DATE_TRUNC"('month', timestamp)
                            ORDER BY "DATE_TRUNC"('month', timestamp) ASC) month_event_count
                FROM   "btm_transactions_standardised"),
            btm_transactions_harmonised
            AS (SELECT txn.vendor_id,
                        txn.event_id,
                        txn.event_name,
                        txn.timestamp,
                        ven.vendor_name,
                        ven.service_name,
                        rates.unit_price transaction_price,
                        "Date_format"(timestamp, '%m') month,
                        "Date_format"(timestamp, '%Y') year
                FROM (btm_transactions_standardised_with_count txn
                        LEFT JOIN "btm_vendor_service_standardised" ven 
                                ON (txn.event_name = ven.event_name)
                                  AND (txn.vendor_id = ven.vendor_id)
                        LEFT JOIN "btm_rates_standardised" rates
                          ON (txn.event_name = rates.event_name)
                            AND (txn.vendor_id = rates.vendor_id)
                            AND (txn.month_event_count BETWEEN rates.volumes_from AND COALESCE(rates.volumes_to, 9999999))
                            AND (txn.timestamp BETWEEN rates.effective_from AND COALESCE(rates.effective_to, "From_iso8601_timestamp"('2049-12-31')))))
          SELECT "MAX"(vendor_name)      vendor_name,
                "MAX"(service_name)      service_name,
                "SUM"(transaction_price) price,
                "COUNT"(event_id)        quantity,
                month,
                year
          FROM   btm_transactions_harmonised
          GROUP  BY vendor_name,
                    service_name,
                    year,
                    month

        Workgroup: !Ref AthenaTransactionWorkgroup

  BillingAndTransactionsCuratedView:
    Type: Custom::AthenaView
    DependsOn: TransactionsCuratedView
    Properties:
      ServiceToken: !GetAtt CustomAthenaViewResourceFunction.Arn
      View:
        Database: !Ref CalculationsDB
        Name: btm_billing_and_transactions_curated
        Query: !Sub |
          SELECT
            COALESCE(invoice.vendor_name, txn.vendor_name) vendor_name
            , COALESCE(invoice.service_name, txn.service_name) service_name
            , COALESCE(invoice.year, txn.year) year
            , COALESCE(invoice.month, txn.month) month
            , (COALESCE(invoice.price, 0) - COALESCE(txn.price, 0)) price_difference
            , (COALESCE(invoice.quantity, 0) - COALESCE(txn.quantity, 0)) quantity_difference
            , (CASE WHEN (COALESCE(txn.price, 0) = 0) THEN (CASE WHEN (COALESCE(invoice.price, 0) = 0) THEN 0 ELSE null END) ELSE ((100 * (COALESCE(invoice.price, 0) - txn.price)) / txn.price) END) price_difference_percentage
            , (CASE WHEN (COALESCE(txn.quantity, 0) = 0) THEN null ELSE ((100 * (COALESCE(invoice.quantity, 0) - txn.quantity)) / txn.quantity) END) quantity_difference_percentage
            , invoice.price billing_price
            , invoice.quantity billing_quantity
            , txn.price transaction_price
            , txn.quantity transaction_quantity
            , CONCAT('£', REGEXP_REPLACE(CAST(CAST(invoice.price AS DECIMAL(10,2)) AS VARCHAR), '(\d)(?=(\d{3})+\.)', '$1,')) billing_price_formatted
            , CONCAT('£', REGEXP_REPLACE(CAST(CAST(txn.price AS DECIMAL(10,2)) AS VARCHAR), '(\d)(?=(\d{3})+\.)', '$1,')) transaction_price_formatted
            , (CASE
                WHEN ((invoice.price = 0) AND (txn.price = 0)) THEN ${QueryMessageNoChargeForThisMonth}
                WHEN ((invoice.price IS NULL) AND (invoice.quantity IS NULL)) THEN ${QueryMessageInvoiceDataMissing}
                WHEN ((txn.price IS NULL) AND (txn.quantity IS NULL)) THEN ${QueryMessageTransactionDataMissing}
                WHEN (txn.price IS NULL) THEN ${QueryMessageRateCardDataMissing}
                ELSE (CASE WHEN (COALESCE(txn.price, 0) = 0) THEN (CASE WHEN (COALESCE(invoice.price, 0) = 0) THEN 0 ELSE null END) ELSE ((100 * (COALESCE(invoice.price, 0) - txn.price)) / txn.price) END) END) Difference
          FROM
            (btm_transactions_curated txn
            FULL JOIN btm_billing_curated invoice ON ((((txn.vendor_name = invoice.vendor_name) AND (txn.service_name = invoice.service_name)) AND (txn.year = invoice.year)) AND (txn.month = invoice.month)))
        Workgroup: !Ref AthenaTransactionWorkgroup

  AthenaTransactionWorkgroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: !Sub ${AWS::StackName}-athena-workgroup
      WorkGroupConfiguration:
        EnforceWorkGroupConfiguration: true
        PublishCloudWatchMetricsEnabled: false
        ResultConfiguration:
          EncryptionConfiguration:
            EncryptionOption: SSE_KMS
            KmsKey: !GetAtt KmsKey.Arn
          OutputLocation:
            !Join ['', ['s3://', !Ref AthenaQueryResultsBucket, '/']]

  AthenaQueryResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-athena-query-results
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !GetAtt KmsKey.Arn
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref GlobalLogBucket
        LogFilePrefix: athena-query-results-bucket/log
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 7
            Status: Enabled
