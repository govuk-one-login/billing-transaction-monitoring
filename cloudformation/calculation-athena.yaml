AWSTemplateFormatVersion: '2010-09-09'

Resources:
  CalculationsDB:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Sub ${AWS::StackName}-calculations

  TransactionTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref CalculationsDB
      TableInput:
        Name: btm_transactions_standardised
        TableType: EXTERNAL_TABLE
        Parameters:
          has_encrypted_data: true
          projection.enabled: true
          projection.datetime.type: date
          projection.datetime.range: 2022-01-01,NOW
          projection.datetime.format: yyyy-MM-dd
          projection.datetime.interval: 1
          projection.datetime.interval.unit: DAYS
          storage.location.template:
            !Join [
              '',
              ['s3://', !Ref StorageBucket, '/btm_transactions/${datetime}/'],
            ]
        PartitionKeys:
          - { Name: datetime, Type: date }
        StorageDescriptor:
          Columns:
            - Name: client_id
              Type: string
            - Name: event_id
              Type: string
            - Name: event_name
              Type: string
            - Name: timestamp
              Type: timestamp
            - Name: timestamp_formatted
              Type: string
            - Name: component_id
              Type: string
          Compressed: true
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Join ['', ['s3://', !Ref StorageBucket, '/']]
          StoredAsSubDirectories: false
          OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          SerdeInfo:
            Parameters:
              {
                ignore.malformed.json: true,
                serialization.format: 1,
                field.delim: '',
              }
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe

  RateTableTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref CalculationsDB
      TableInput:
        Name: btm_rates_standardised
        TableType: EXTERNAL_TABLE
        Parameters:
          has_encrypted_data: true
          storage.location.template: !Sub s3://${ConfigStackParameter.Value}/rate_tables/prices.csv
        StorageDescriptor:
          Columns:
            - Name: client_id
              Type: string
            - Name: event_name
              Type: string
            - Name: volumes_from
              Type: int
            - Name: volumes_to
              Type: int
            - Name: unit_price
              Type: decimal(12,4)
            - Name: effective_from
              Type: date
          Compressed: true
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Sub s3://${ConfigStackParameter.Value}/rate_tables/
          StoredAsSubDirectories: false
          OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          SerdeInfo:
            Parameters:
              field.delim: ','
              skip.header.line.count: 1
              timestamp.formats: yyyy-MM-dd
            SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  VendorServiceMappingTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref CalculationsDB
      TableInput:
        Name: btm_vendor_service_standardised
        TableType: EXTERNAL_TABLE
        Parameters:
          has_encrypted_data: true
          storage.location.template: !Sub s3://${ConfigStackParameter.Value}/vendor_services/vendor-services.csv
        StorageDescriptor:
          Columns:
            - Name: vendor_name
              Type: string
            - Name: vendor_regex
              Type: string
            - Name: client_id
              Type: string
            - Name: service_name
              Type: string
            - Name: service_regex
              Type: string
            - Name: event_name
              Type: string
          Compressed: true
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Sub s3://${ConfigStackParameter.Value}/vendor_services/
          StoredAsSubDirectories: false
          OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          SerdeInfo:
            Parameters:
              field.delim: ','
              skip.header.line.count: 1
            SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  TransactionsCuratedView:
    Type: Custom::AthenaView
    Properties:
      ServiceToken: !GetAtt CustomAthenaViewResourceFunction.Arn
      View:
        Database: !Ref CalculationsDB
        Name: btm_transactions_curated
        Query: |
          WITH standardised_rates_with_max_date
            AS (SELECT *,
                        ( Cast("Lead"(effective_from, 1,
                              "From_iso8601_timestamp"('2049-12-31'))
                                over (
                                  PARTITION BY client_id, event_name
                                  ORDER BY client_id ASC, event_name ASC,
                                effective_from ASC
                                )
                              AS DATE)
                          - interval '1' day ) "end_max"
                FROM   "btm_rates_standardised"),
            standardised_rates_with_end
            AS (SELECT *,
                        "Max"(end_max)
                          over (
                            PARTITION BY client_id, event_name, effective_from) "end"
                FROM   standardised_rates_with_max_date),
            btm_transactions_standardised_with_count
            AS (SELECT *,
                        "$path" path,
                        "COUNT"(event_id)
                          over (
                            PARTITION BY event_name, client_id, "Date_trunc"('month',
                          timestamp)
                            ORDER BY "Date_trunc"('month', timestamp) ASC)
                        month_event_count
                FROM   "btm_transactions_standardised"),
            btm_transactions_harmonised
            AS (SELECT txn.client_id,
                        txn.event_id,
                        txn.event_name,
                        txn.timestamp,
                        ven.vendor_name,
                        ven.service_name,
                        rates.unit_price transaction_price,
                        "Date_format"(timestamp, '%m') month,
                        "Date_format"(timestamp, '%Y') year
                FROM (btm_transactions_standardised_with_count txn
                        left join "btm_vendor_service_standardised" ven 
                                ON ( txn.event_name = ven.event_name )
                                  AND ( txn.client_id = ven.client_id )
                        left join "standardised_rates_with_end" rates
                                ON ( txn.event_name = rates.event_name )
                                  AND ( txn.client_id = rates.client_id )
                                  AND ( txn.month_event_count BETWEEN rates.volumes_from AND Coalesce(rates.volumes_to, 9999999))
                                  AND ( txn.timestamp BETWEEN rates.effective_from AND rates."end" )))
          SELECT "MAX"(vendor_name)      vendor_name,
                "MAX"(service_name)      service_name,
                "SUM"(transaction_price) price,
                "COUNT"(event_id)        quantity,
                month,
                year
          FROM   btm_transactions_harmonised
          GROUP  BY vendor_name,
                    service_name,
                    year,
                    month

        Workgroup: !Ref AthenaTransactionWorkgroup

  AthenaTransactionWorkgroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: !Sub ${AWS::StackName}-athena-workgroup
      WorkGroupConfiguration:
        EnforceWorkGroupConfiguration: true
        PublishCloudWatchMetricsEnabled: false
        ResultConfiguration:
          EncryptionConfiguration:
            EncryptionOption: 'SSE_KMS'
            KmsKey: !GetAtt KmsKey.Arn
          OutputLocation:
            !Join ['', ['s3://', !Ref AthenaQueryResultsBucket, '/']]

  AthenaQueryResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-athena-query-results
      VersioningConfiguration:
        Status: 'Enabled'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !GetAtt KmsKey.Arn
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref AthenaAccessLogBucket
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 7
            Status: Enabled

  AthenaAccessLogBucket:
    # checkov:skip=CKV_AWS_18: This is the access log bucket - no need for another
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-athena-query-results-logs
      VersioningConfiguration:
        Status: Enabled
      AccessControl: LogDeliveryWrite
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !GetAtt KmsKey.Arn
