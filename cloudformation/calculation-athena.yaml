AWSTemplateFormatVersion: '2010-09-09'

Resources:
  CalculationsDB:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Sub ${AWS::StackName}-calculations

  MonthlyExtractTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref CalculationsDB
      TableInput:
        Name: btm_monthly_extract
        TableType: EXTERNAL_TABLE
        Parameters:
          has_encrypted_data: true
          storage.location.template: !Sub s3://${StorageBucket}/btm_extract_data/full-extract.json
        StorageDescriptor:
          Columns:
            - Name: vendor_id
              Type: string
            - Name: vendor_name
              Type: string
            - Name: service_name
              Type: string
            - Name: contract_id
              Type: string
            - Name: contract_name
              Type: string
            - Name: year
              Type: string
            - Name: month
              Type: string
            - Name: billing_unit_price
              Type: string
            - Name: billing_price_formatted
              Type: string
            - Name: transaction_price_formatted
              Type: string
            - Name: price_difference
              Type: string
            - Name: billing_quantity
              Type: string
            - Name: transaction_quantity
              Type: string
            - Name: quantity_difference
              Type: string
            - Name: billing_amount_with_tax
              Type: string
            - Name: price_difference_percentage
              Type: double
            - Name: invoice_is_quarterly
              Type: boolean
          Compressed: true
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Sub s3://${StorageBucket}/btm_extract_data/
          StoredAsSubDirectories: false
          OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          SerdeInfo:
            Parameters:
              ignore.malformed.json: true
              serialization.format: 1
              field.delim: ','
              timestamp.formats: yyyy-MM-dd
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe

  TransactionTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref CalculationsDB
      TableInput:
        Name: btm_transactions_standardised
        TableType: EXTERNAL_TABLE
        Parameters:
          has_encrypted_data: true
          partition_filtering.enabled: true
          projection.enabled: true
          projection.year.type: integer
          projection.year.range: 2005,2050
          projection.month.type: integer
          projection.month.digits: 2
          projection.month.range: 1,12
          storage.location.template:
            !Join [
              '',
              ['s3://', !Ref StorageBucket, '/btm_event_data/${year}/${month}'],
            ]
        PartitionKeys:
          - { Name: year, Type: string }
          - { Name: month, Type: string }
        StorageDescriptor:
          Columns:
            - Name: vendor_id
              Type: string
            - Name: event_id
              Type: string
            - Name: event_name
              Type: string
            - Name: timestamp
              Type: timestamp
            - Name: timestamp_formatted
              Type: string
            - Name: component_id
              Type: string
            - Name: credits
              Type: int
          Compressed: true
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Sub s3://${StorageBucket}/btm_event_data/
          StoredAsSubDirectories: false
          OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          SerdeInfo:
            Parameters:
              ignore.malformed.json: true
              serialization.format: 1
              field.delim: ''
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe

  RateTableTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref CalculationsDB
      TableInput:
        Name: btm_rates_standardised
        TableType: EXTERNAL_TABLE
        Parameters:
          has_encrypted_data: true
          storage.location.template: !Sub s3://${ConfigStackParameter.Value}/rate_tables/rates.csv
        StorageDescriptor:
          Columns:
            - Name: vendor_id
              Type: string
            - Name: event_name
              Type: string
            - Name: volumes_from
              Type: int
            - Name: volumes_to
              Type: int
            - Name: unit_price
              Type: decimal(12,4)
            - Name: effective_from
              Type: date
            - Name: effective_to
              Type: date
          Compressed: true
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Sub s3://${ConfigStackParameter.Value}/rate_tables/
          StoredAsSubDirectories: false
          OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          SerdeInfo:
            Parameters:
              field.delim: ','
              skip.header.line.count: 1
              timestamp.formats: yyyy-MM-dd
            SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  VendorServiceMappingTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref CalculationsDB
      TableInput:
        Name: btm_vendor_service_standardised
        TableType: EXTERNAL_TABLE
        Parameters:
          has_encrypted_data: true
          storage.location.template: !Sub s3://${ConfigStackParameter.Value}/vendor_services/vendor-services.csv
        StorageDescriptor:
          Columns:
            - Name: vendor_name
              Type: string
            - Name: vendor_id
              Type: string
            - Name: service_name
              Type: string
            - Name: service_regex
              Type: string
            - Name: event_name
              Type: string
            - Name: contract_id
              Type: string
            - Name: invoice_is_quarterly
              Type: boolean
          Compressed: true
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Sub s3://${ConfigStackParameter.Value}/vendor_services/
          StoredAsSubDirectories: false
          OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          SerdeInfo:
            Parameters:
              field.delim: ','
              skip.header.line.count: 1
            SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  ContractsMappingTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref CalculationsDB
      TableInput:
        Name: btm_contracts_standardised
        TableType: EXTERNAL_TABLE
        Parameters:
          has_encrypted_data: true
          storage.location.template: !Sub s3://${ConfigStackParameter.Value}/contracts/contracts.csv
        StorageDescriptor:
          Columns:
            - Name: id
              Type: string
            - Name: name
              Type: string
            - Name: vendor_id
              Type: string
          Compressed: true
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Sub s3://${ConfigStackParameter.Value}/contracts/
          StoredAsSubDirectories: false
          OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          SerdeInfo:
            Parameters:
              field.delim: ','
              skip.header.line.count: 1
            SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  TransactionsCuratedView:
    Type: Custom::AthenaView
    DependsOn:
      - TransactionTable
    Properties:
      ServiceToken: !GetAtt CustomAthenaViewResourceFunction.Arn
      View:
        Database: !Ref CalculationsDB
        Name: btm_transactions_curated
        Query: |
          WITH btm_transactions_standardised_with_count
            AS (SELECT *,
                        "$path" path,
                        "SUM"(COALESCE(credits, 1))
                          OVER (
                            PARTITION BY event_name, vendor_id, year, month
                            ORDER BY year ASC, month ASC) month_event_count
                FROM   "btm_transactions_standardised"),
            btm_transactions_harmonised
            AS (SELECT txn.vendor_id,
                        txn.event_id,
                        txn.event_name,
                        txn.timestamp,
                        txn.year,
                        txn.month,
                        month_event_count,
                        ven.vendor_name,
                        ven.service_name,
                        contract.id contract_id,
                        contract.name contract_name,
                        (COALESCE(credits, 1) * rates.unit_price) transaction_price,
                        ven.invoice_is_quarterly
                FROM (btm_transactions_standardised_with_count txn
                        LEFT JOIN "btm_vendor_service_standardised" ven 
                                ON (txn.event_name = ven.event_name)
                                  AND (txn.vendor_id = ven.vendor_id)
                        LEFT JOIN "btm_contracts_standardised" contract
                                ON (ven.contract_id = contract.id)
                        LEFT JOIN "btm_rates_standardised" rates
                          ON (txn.event_name = rates.event_name)
                            AND (txn.vendor_id = rates.vendor_id)
                            AND (txn.month_event_count BETWEEN rates.volumes_from AND COALESCE(rates.volumes_to, 9999999))
                            AND (txn.timestamp BETWEEN rates.effective_from AND COALESCE(rates.effective_to, "From_iso8601_timestamp"('2049-12-31')))))
          SELECT "MAX"(vendor_id)        vendor_id,
                "MAX"(vendor_name)       vendor_name,
                "MAX"(event_name)        event_name,
                "MAX"(service_name)      service_name,
                "MAX"(contract_id)       contract_id,                
                "MAX"(contract_name)     contract_name,
                "SUM"(transaction_price) price,
                "MAX"(month_event_count) quantity,
                month,
                year,
                "MAX"(invoice_is_quarterly) invoice_is_quarterly
          FROM   btm_transactions_harmonised
          GROUP  BY vendor_id,
                    service_name,
                    year,
                    month

        Workgroup: !Ref AthenaTransactionWorkgroup

  BillingAndTransactionsCuratedView:
    Type: Custom::AthenaView
    DependsOn: BillingAndTransactionsMonthlyNumericView
    Properties:
      ServiceToken: !GetAtt CustomAthenaViewResourceFunction.Arn
      View:
        Database: !Ref CalculationsDB
        Name: btm_billing_and_transactions_curated
        Query: !Sub |
          SELECT
            vendor_id
            , vendor_name
            , service_name
            , contract_id
            , contract_name
            , CAST(year AS VARCHAR) year
            , (CASE
                WHEN LENGTH(CAST(invoice_month AS VARCHAR)) = 1 THEN CONCAT('0', CAST(invoice_month AS VARCHAR))
                ELSE CAST(invoice_month AS VARCHAR)
              END) month
            , CONCAT('£', (CAST(billing_unit_price AS VARCHAR))) billing_unit_price
            , CONCAT('£', REGEXP_REPLACE(CAST(billing_amount_with_tax AS VARCHAR), '(\d)(?=(\d{3})+\.)', '$1,')) billing_amount_with_tax
            , invoice_is_quarterly
            , CONCAT('£', REGEXP_REPLACE(CAST(billing_price AS VARCHAR), '(\d)(?=(\d{3})+\.)', '$1,')) billing_price_formatted
            , CONCAT('£', REGEXP_REPLACE(CAST(CAST(SUM(transaction_price) AS DECIMAL(10,2)) AS VARCHAR), '(\d)(?=(\d{3})+\.)', '$1,')) transaction_price_formatted
            , CONCAT('£', REGEXP_REPLACE(CAST(CAST((MAX(billing_price) - SUM(transaction_price)) AS decimal(10,2)) AS VARCHAR), '(\d)(?=(\d{3})+\.)', '$1,')) price_difference
            , billing_quantity
            , SUM(transaction_quantity) transaction_quantity
            , REGEXP_REPLACE(CAST(MAX(billing_quantity) - SUM(transaction_quantity) AS VARCHAR), '(\d)(?=(\d{3})+\.)', '$1,') quantity_difference
            , (CASE
                WHEN ((MAX(billing_price) = 0) AND (SUM(transaction_price) = 0)) THEN ${QueryMessageNoChargeForThisMonth}
                WHEN ((MAX(billing_price) IS NULL) AND (MAX(billing_quantity) IS NULL)) THEN ${QueryMessageInvoiceDataMissing}
                WHEN ((SUM(transaction_price) IS NULL) AND (SUM(transaction_quantity) IS NULL)) THEN ${QueryMessageTransactionDataMissing}
                WHEN (SUM(transaction_price) IS NULL) THEN ${QueryMessageRateCardDataMissing}
                WHEN (COALESCE(SUM(transaction_price), 0) = 0) THEN (CASE WHEN (COALESCE(MAX(billing_price), 0) = 0) THEN 0 ELSE ${QueryMessageUnexpectedInvoiceCharge} END)
                ELSE ((100 * (COALESCE(MAX(billing_price), 0) - SUM(transaction_price))) / SUM(transaction_price))
              END) price_difference_percentage
          FROM
            btm_billing_and_monthly_transactions_numeric
          GROUP BY
            vendor_id
            , vendor_name
            , service_name
            , contract_id
            , contract_name
            , year
            , billing_unit_price
            , billing_price
            , billing_quantity
            , billing_amount_with_tax
            , invoice_is_quarterly
            , invoice_month
        Workgroup: !Ref AthenaTransactionWorkgroup

  BillingAndTransactionsMonthlyNumericView:
    Type: Custom::AthenaView
    DependsOn:
      - InvoiceLineItemView
      - TransactionsCuratedView
    Properties:
      ServiceToken: !GetAtt CustomAthenaViewResourceFunction.Arn
      View:
        Database: !Ref CalculationsDB
        Name: btm_billing_and_monthly_transactions_numeric
        Query: !Sub |
          SELECT
            COALESCE(txn.vendor_id, invoice.vendor_id) vendor_id
            , COALESCE(txn.vendor_name, invoice.vendor_name) vendor_name
            , COALESCE(txn.service_name, invoice.service_name) service_name
            , COALESCE(txn.contract_id, invoice.contract_id) contract_id
            , COALESCE(txn.contract_name, invoice.contract_name) contract_name
            , CAST(COALESCE(txn.year, invoice.year) AS INT) year
            , CAST(txn.month AS INT) transaction_month
            , (CASE
                WHEN (CASE WHEN invoice.vendor_id IS NULL THEN txn.invoice_is_quarterly ELSE invoice.invoice_is_quarterly END)
                -- First month of given month's quarter:
                THEN 3 * ((CAST(COALESCE(invoice.month, txn.month) AS INT) - 1) / 3) + 1
                ELSE CAST(COALESCE(txn.month, invoice.month) AS INT)
              END) invoice_month
            , CAST(invoice.unit_price AS DECIMAL(12, 4)) billing_unit_price
            , CAST(invoice.price AS DECIMAL(10,2)) billing_price
            , txn.price transaction_price
            , invoice.quantity billing_quantity
            , txn.quantity transaction_quantity
            , CAST((invoice.price + invoice.tax) AS decimal(10,2)) billing_amount_with_tax
            , COALESCE(
                (CASE
                  WHEN invoice.vendor_id IS NULL THEN txn.invoice_is_quarterly
                  ELSE invoice.invoice_is_quarterly
                END),
                FALSE
              ) invoice_is_quarterly
          FROM
            btm_transactions_curated txn
            FULL JOIN btm_billing_curated invoice
            ON (
              txn.vendor_id = invoice.vendor_id
              AND txn.event_name = invoice.event_name 
              AND txn.year = invoice.year
              AND (
                -- If quarterly, join on quarter
                invoice.invoice_is_quarterly
                AND (
                  invoice.month = '01' AND (txn.month = '01' OR txn.month = '02' OR txn.month = '03')
                  OR invoice.month = '04' AND (txn.month = '04' OR txn.month = '05' OR txn.month = '06')
                  OR invoice.month = '07' AND (txn.month = '07' OR txn.month = '08' OR txn.month = '09')
                  OR invoice.month = '10' AND (txn.month = '10' OR txn.month = '11' OR txn.month = '12')
                )
                -- If not quarterly, join on month
                OR (NOT invoice.invoice_is_quarterly OR invoice.invoice_is_quarterly IS NULL)
                AND txn.month = invoice.month
              )
            )
        Workgroup: !Ref AthenaTransactionWorkgroup

  AthenaTransactionWorkgroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: !Sub ${AWS::StackName}-athena-workgroup
      WorkGroupConfiguration:
        EnforceWorkGroupConfiguration: true
        PublishCloudWatchMetricsEnabled: false
        ResultConfiguration:
          EncryptionConfiguration:
            EncryptionOption: SSE_KMS
            KmsKey: !GetAtt KmsKey.Arn
          OutputLocation:
            !Join ['', ['s3://', !Ref AthenaQueryResultsBucket, '/']]

  AthenaQueryResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-athena-query-results
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !GetAtt KmsKey.Arn
            BucketKeyEnabled: true

      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref GlobalLogBucket
        LogFilePrefix: athena-query-results-bucket/log
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 7
            Status: Enabled
