AWSTemplateFormatVersion: '2010-09-09'

Resources:
  CalculationsDB:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Sub ${AWS::StackName}-calculations

  TransactionTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref CalculationsDB
      TableInput:
        Name: btm_transactions_standardised
        TableType: EXTERNAL_TABLE
        Parameters:
          has_encrypted_data: true
          projection.enabled: true
          projection.datetime.type: date
          projection.datetime.range: 2022-01-01,NOW
          projection.datetime.format: yyyy-MM-dd
          projection.datetime.interval: 1
          projection.datetime.interval.unit: DAYS
          storage.location.template:
            !Join [
              '',
              ['s3://', !Ref StorageBucket, '/btm_transactions/${datetime}/'],
            ]
        PartitionKeys:
          - { Name: datetime, Type: date }
        StorageDescriptor:
          Columns:
            - { Name: event_id, Type: string }
            - { Name: event_name, Type: string }
            - { Name: client_id, Type: string }
            - { Name: timestamp, Type: timestamp }
            - { Name: timestamp_formatted, Type: string }
            - { Name: component_id, Type: string }
          Compressed: true
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Join ['', ['s3://', !Ref StorageBucket, '/']]
          StoredAsSubDirectories: false
          OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          SerdeInfo:
            Parameters:
              {
                ignore.malformed.json: true,
                serialization.format: 1,
                field.delim: '',
              }
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe

  RateTableTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref CalculationsDB
      TableInput:
        Name: btm_rates_standardised
        TableType: EXTERNAL_TABLE
        Parameters:
          has_encrypted_data: true
          projection.enabled: true
          projection.datetime.type: date
          projection.datetime.range: 2022-01-01,NOW
          projection.datetime.format: yyyy-MM-dd
          projection.datetime.interval: 1
          projection.datetime.interval.unit: DAYS
          storage.location.template:
            !Join ['', ['s3://', !Ref ConfigBucket, '/rate_tables/prices.csv']]
        StorageDescriptor:
          Columns:
            - { Name: client_id, Type: string }
            - { Name: service_name, Type: string }
            - { Name: volumes_from, Type: int }
            - { Name: volumes_to, Type: int }
            - { Name: unit_price, Type: int }
            - { Name: effective_from, Type: date }
          Compressed: true
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Join ['', ['s3://', !Ref ConfigBucket, '/rate_tables/']]
          StoredAsSubDirectories: false
          OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          SerdeInfo:
            Parameters:
              field.delim: ','
              skip.header.line.count: 1
              timestamp.formats: yyyy-MM-dd
            SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  AthenaTransactionWorkgroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: !Sub ${AWS::StackName}-athena-workgroup
      WorkGroupConfiguration:
        EnforceWorkGroupConfiguration: true
        PublishCloudWatchMetricsEnabled: false
        ResultConfiguration:
          EncryptionConfiguration:
            EncryptionOption: 'SSE_KMS'
            KmsKey: !GetAtt KmsKey.Arn
          OutputLocation:
            !Join ['', ['s3://', !Ref AthenaQueryResultsBucket, '/']]

  AthenaQueryResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-athena-query-results
      VersioningConfiguration:
        Status: 'Enabled'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !GetAtt KmsKey.Arn
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref AthenaAccessLogBucket
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 7
            Status: Enabled

  AthenaAccessLogBucket:
    # checkov:skip=CKV_AWS_18: This is the access log bucket - no need for another
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-athena-query-results-logs
      VersioningConfiguration:
        Status: Enabled
      AccessControl: LogDeliveryWrite
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !GetAtt KmsKey.Arn
