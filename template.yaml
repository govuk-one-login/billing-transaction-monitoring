AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for infrastructure to monitor user identity verification events for billing purposes
Transform: AWS::Serverless-2016-10-31

Parameters:
  CodeSigningConfigArn:
    Description: ARN of Code Signing Config from deployment pipeline
    Type: String
    Default: none
  Environment:
    Description: Environment type
    Type: String
    Default: dev
    AllowedValues:
      - local
      - dev
      - build
      - staging
      - integration
      - production
  PermissionsBoundary:
    Description: ARN of permissions boundary for new roles
    Type: String
    Default: none
  VpcStackName:
    Description: Stack name for VPC in which to run
    Type: String
    Default: vpc

Conditions:
  UseCodeSigning: !Not [!Equals [!Ref CodeSigningConfigArn, none]]
  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, none]]
  IsLocal: !Equals [!Ref Environment, "local"]

Globals:
  Function:
    CodeSigningConfigArn:
      !If [UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]
    KmsKeyArn: !GetAtt KmsKey.Arn
    PermissionsBoundary:
      !If [UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue]
    Runtime: nodejs16.x
    Timeout: 30
    CodeUri: dist/

Resources:

  AlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      KmsMasterKeyId: !GetAtt KmsKey.Arn

# This is for testing only - in production we will use another SNS queue
  TestTxMASNS:
    Type: "AWS::SNS::Topic"
    Properties:
      KmsMasterKeyId: !GetAtt KmsKey.Arn
      DisplayName: "Test TxMA SNS topic"
      TopicName: "TestTxMATopic"
      Subscription:
        - Protocol: sqs
          Endpoint: !GetAtt FilterQueue.Arn

  TestTxMASNSToFilterQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "TestSnsToFilterQueuePolicy"
            Effect: Allow
            Principal:
              Service: "sns.amazonaws.com"
            Resource: !GetAtt FilterQueue.Arn
            Action: SQS:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref TestTxMASNS
      Queues:
        - Ref: FilterQueue

  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - sns.amazonaws.com
                - sqs.amazonaws.com
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:GenerateDataKey*
            Resource: '*'

# Filtering
  FilterDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !GetAtt KmsKey.Arn
      QueueName: filter-dead-letter-queue

  FilterDeadLetterQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref AlarmTopic
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt FilterDeadLetterQueue.QueueName
      EvaluationPeriods: 1
      MetricName: NumberOfMessagesReceived
      Namespace: AWS/SQS
      Period: 1800
      Statistic: Sum
      Threshold: 0

  FilterFunction:
    Type: AWS::Serverless::Function
    Properties:
      DeadLetterQueue:
        TargetArn: !GetAtt FilterFunctionDeadLetterQueue.Arn
        Type: SQS
      Events:
        FilterEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt FilterQueue.Arn
      Environment:
        Variables:
          # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
          OUTPUT_QUEUE_URL: !Ref CleanQueue
      Handler: src/handlers/filter/handler.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
                - sqs:ReceiveMessage
              Resource: !GetAtt FilterQueue.Arn
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:GenerateDataKey*
                - kms:Encrypt
              Resource: !GetAtt KmsKey.Arn
      ReservedConcurrentExecutions: 10
      VpcConfig:
        SecurityGroupIds:
          - !If [IsLocal, 'vpn-SecurityGroupId', Fn::ImportValue: !Sub '${VpcStackName}-AWSServicesEndpointSecurityGroupId']
        SubnetIds:
          - !If [IsLocal, 'vpn-SubnetA', Fn::ImportValue: !Sub '${VpcStackName}-PrivateSubnetIdA']
          - !If [IsLocal, 'vpn-SubnetB', Fn::ImportValue: !Sub '${VpcStackName}-PrivateSubnetIdB']

  FilterFunctionAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref AlarmTopic
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref FilterFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 1800
      Statistic: Sum
      Threshold: 0

  FilterFunctionDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !GetAtt KmsKey.Arn
      QueueName: filter-function-dead-letter-queue

  FilterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !GetAtt KmsKey.Arn
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt FilterDeadLetterQueue.Arn
        maxReceiveCount: 1
      QueueName: filter-queue

# Cleaning
  CleanDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !GetAtt KmsKey.Arn
      QueueName: clean-dead-letter-queue

  CleanDeadLetterQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref AlarmTopic
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt CleanDeadLetterQueue.QueueName
      EvaluationPeriods: 1
      MetricName: NumberOfMessagesReceived
      Namespace: AWS/SQS
      Period: 1800
      Statistic: Sum
      Threshold: 0

  CleanFunction:
    Type: AWS::Serverless::Function
    Properties:
      DeadLetterQueue:
        TargetArn: !GetAtt CleanFunctionDeadLetterQueue.Arn
        Type: SQS
      Events:
        CleanEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt CleanQueue.Arn
      Handler: src/handlers/clean.clean
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
                - sqs:ReceiveMessage
              Resource: !GetAtt CleanQueue.Arn
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:GenerateDataKey*
                - kms:Encrypt
              Resource: !GetAtt KmsKey.Arn
      ReservedConcurrentExecutions: 10
      VpcConfig:
        SecurityGroupIds:
          - !If [IsLocal, 'vpn-SecurityGroupId', Fn::ImportValue: !Sub '${VpcStackName}-AWSServicesEndpointSecurityGroupId']
        SubnetIds:
          - !If [IsLocal, 'vpn-SubnetA', Fn::ImportValue: !Sub '${VpcStackName}-PrivateSubnetIdA']
          - !If [IsLocal, 'vpn-SubnetB', Fn::ImportValue: !Sub '${VpcStackName}-PrivateSubnetIdB']

  CleanFunctionAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref AlarmTopic
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref CleanFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 1800
      Statistic: Sum
      Threshold: 0

  CleanFunctionDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !GetAtt KmsKey.Arn
      QueueName: clean-function-dead-letter-queue

  CleanQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !GetAtt KmsKey.Arn
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt CleanDeadLetterQueue.Arn
        maxReceiveCount: 1
      QueueName: clean-queue

# Storage
  StorageDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !GetAtt KmsKey.Arn
      QueueName: storage-dead-letter-queue

  StorageDeadLetterQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref AlarmTopic
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt StorageDeadLetterQueue.QueueName
      EvaluationPeriods: 1
      MetricName: NumberOfMessagesReceived
      Namespace: AWS/SQS
      Period: 1800
      Statistic: Sum
      Threshold: 0

  StorageFunction:
    Type: AWS::Serverless::Function
    Properties:
      DeadLetterQueue:
        TargetArn: !GetAtt StorageFunctionDeadLetterQueue.Arn
        Type: SQS
      Events:
        StorageEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt StorageQueue.Arn
      Environment:
        Variables:
          # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
          STORAGE_TABLE: !Ref StorageTable
      Handler: src/handlers/storage.save
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
          - Effect: Allow
            Action:
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ReceiveMessage
            Resource: !GetAtt StorageQueue.Arn
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
              - kms:Encrypt
            Resource: !GetAtt KmsKey.Arn
          - Effect: All
            Action:
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Resource: !GetAtt StorageTable.Arn
      ReservedConcurrentExecutions: 10
      VpcConfig:
        SecurityGroupIds:
          - !If [IsLocal, 'vpn-SecurityGroupId', Fn::ImportValue: !Sub '${VpcStackName}-AWSServicesEndpointSecurityGroupId']
        SubnetIds:
          - !If [IsLocal, 'vpn-SubnetA', Fn::ImportValue: !Sub '${VpcStackName}-PrivateSubnetIdA']
          - !If [IsLocal, 'vpn-SubnetB', Fn::ImportValue: !Sub '${VpcStackName}-PrivateSubnetIdB']

  StorageFunctionAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref AlarmTopic
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref StorageFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 1800
      Statistic: Sum
      Threshold: 0

  StorageFunctionDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !GetAtt KmsKey.Arn
      QueueName: storage-function-dead-letter-queue

  StorageQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !GetAtt KmsKey.Arn
      QueueName: storage-queue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt StorageDeadLetterQueue.Arn
        maxReceiveCount: 1

  StorageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: EventId
          AttributeType: S
      KeySchema:
        - AttributeName: EventId
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        KMSMasterKeyId: !GetAtt KmsKey.Arn
        SSEEnabled: true
        SSEType: KMS
