AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for infrastructure to monitor user identity verification events for billing purposes
Transform: AWS::Serverless-2016-10-31

Parameters:
  CodeSigningConfigArn:
    Description: ARN of Code Signing Config from deployment pipeline
    Type: String
    Default: none
  Environment:
    Description: Environment type
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - build
      - staging
      - integration
      - production
  PermissionsBoundary:
    Description: ARN of permissions boundary for new roles
    Type: String
    Default: none
  VpcStackName:
    Description: Stack name for VPC in which to run
    Type: String
    Default: vpc

Conditions:
  UseCodeSigning: !Not [!Equals [!Ref CodeSigningConfigArn, none]]
  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, none]]

Globals:
  Function:
    CodeSigningConfigArn:
      !If [UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]
    PermissionsBoundary:
      !If [UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue]
    Runtime: nodejs16.x
    Timeout: 100

Resources:
  CleanDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !GetAtt CleanDeadLetterQueueKmsKey.Arn
      QueueName: clean-dead-letter-queue

  CleanDeadLetterQueueKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:Decrypt
            Resource: '*'

  CleanFunction:
    Type: AWS::Serverless::Function
    Properties:
      DeadLetterQueue:
        TargetArn: !GetAtt CleanFunctionDeadLetterQueue.Arn
        Type: SQS
      Events:
        CleanEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt CleanQueue.Arn
      Handler: src/handlers/clean.clean
      KmsKeyArn: !GetAtt CleanFunctionKmsKey.Arn
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Sid: Logs
              Effect: Allow
              Action:
                - logs:*
              Resource: arn:aws:logs:*:*:*
      ReservedConcurrentExecutions: 10
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub '${VpcStackName}-AWSServicesEndpointSecurityGroupId'
        SubnetIds:
          - Fn::ImportValue: !Sub '${VpcStackName}-PrivateSubnetIdA'
          - Fn::ImportValue: !Sub '${VpcStackName}-PrivateSubnetIdB'

  CleanFunctionDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !GetAtt CleanFunctionDeadLetterQueueKmsKey.Arn
      QueueName: clean-function-dead-letter-queue

  CleanFunctionDeadLetterQueueKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:Decrypt
            Resource: '*'

  CleanFunctionKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:Decrypt
            Resource: '*'

  CleanQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !GetAtt CleanQueueKmsKey.Arn
      QueueName: clean-queue

  CleanQueueKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:Decrypt
            Resource: '*'
