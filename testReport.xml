<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="60" failures="6" errors="0" time="625.643">
  <testsuite name="Email" errors="0" failures="0" skipped="0" timestamp="2023-09-20T14:55:56" time="123.002" tests="5">
    <testcase classname="Email CSV attachment" name="Email CSV attachment" time="5.495">
    </testcase>
    <testcase classname="Email PDF attachment" name="Email PDF attachment" time="1.526">
    </testcase>
    <testcase classname="Email CSV and PDF" name="Email CSV and PDF" time="2.418">
    </testcase>
    <testcase classname="Email CSV, PDF and JPEG" name="Email CSV, PDF and JPEG" time="2.636">
    </testcase>
    <testcase classname="Email Various attachments" name="Email Various attachments" time="3.445">
    </testcase>
  </testsuite>
  <testsuite name="New invoice with same month, vendor, service as old line item" errors="0" failures="0" skipped="0" timestamp="2023-09-20T14:55:56" time="299.88" tests="1">
    <testcase classname="New invoice with same month, vendor, service as old line item should archive old line item" name="New invoice with same month, vendor, service as old line item should archive old line item" time="192.54">
    </testcase>
  </testsuite>
  <testsuite name="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
" errors="0" failures="0" skipped="0" timestamp="2023-09-20T14:55:56" time="325.301" tests="4">
    <testcase classname="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid non-quarterly pdf file in raw-invoice bucket and see that we can see the data in the view" name="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid non-quarterly pdf file in raw-invoice bucket and see that we can see the data in the view" time="53.832">
    </testcase>
    <testcase classname="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid quarterly pdf file in raw-invoice bucket and see that we can see the data in the view" name="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid quarterly pdf file in raw-invoice bucket and see that we can see the data in the view" time="73.567">
    </testcase>
    <testcase classname="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid non-quarterly csv file in raw-invoice bucket and check that we can see the data in the view" name="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid non-quarterly csv file in raw-invoice bucket and check that we can see the data in the view" time="56.881">
    </testcase>
    <testcase classname="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid quarterly csv file in raw-invoice bucket and check that we can see the data in the view" name="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid quarterly csv file in raw-invoice bucket and check that we can see the data in the view" time="33.767">
    </testcase>
  </testsuite>
  <testsuite name="
 DashboardDataExtractFunction" errors="0" failures="0" skipped="0" timestamp="2023-09-20T14:55:55" time="346.034" tests="2">
    <testcase classname="
 DashboardDataExtractFunction should save an updated full-extract.json file, which is reflected in the btm_monthly_extract table, when standardised non-quarterly invoice data is stored in s3" name="
 DashboardDataExtractFunction should save an updated full-extract.json file, which is reflected in the btm_monthly_extract table, when standardised non-quarterly invoice data is stored in s3" time="88.505">
    </testcase>
    <testcase classname="
 DashboardDataExtractFunction should save an updated full-extract.json file, which is reflected in the btm_monthly_extract table, when standardised quarterly invoice data is stored in s3" name="
 DashboardDataExtractFunction should save an updated full-extract.json file, which is reflected in the btm_monthly_extract table, when standardised quarterly invoice data is stored in s3" time="160.447">
    </testcase>
  </testsuite>
  <testsuite name="
 Upload invoice standardised data to s3 directly and check the billing curated view" errors="0" failures="0" skipped="0" timestamp="2023-09-20T15:01:44" time="53.537" tests="1">
    <testcase classname="
 Upload invoice standardised data to s3 directly and check the billing curated view Uploaded invoice standardised data should match the results from billing curated view" name="
 Upload invoice standardised data to s3 directly and check the billing curated view Uploaded invoice standardised data should match the results from billing curated view" time="21.183">
    </testcase>
  </testsuite>
  <testsuite name="
 Synthetic Events Generation Tests
" errors="0" failures="0" skipped="0" timestamp="2023-09-20T15:00:57" time="101.279" tests="3">
    <testcase classname="
 Synthetic Events Generation Tests
 should generate synthetic events for missing events in the full extract" name="
 Synthetic Events Generation Tests
 should generate synthetic events for missing events in the full extract" time="10.296">
    </testcase>
    <testcase classname="
 Synthetic Events Generation Tests
 should generate synthetic events when the quantity in the full extract is less than the synthetic config quantity" name="
 Synthetic Events Generation Tests
 should generate synthetic events when the quantity in the full extract is less than the synthetic config quantity" time="20.825">
    </testcase>
    <testcase classname="
 Synthetic Events Generation Tests
 should not generate synthetic events when the event exists and the quantity in the extract matches with synthetic config quantity" name="
 Synthetic Events Generation Tests
 should not generate synthetic events when the event exists and the quantity in the extract matches with synthetic config quantity" time="10.315">
    </testcase>
  </testsuite>
  <testsuite name="
 Clean Function - Happy path tests
" errors="0" failures="0" skipped="0" timestamp="2023-09-20T15:02:38" time="30.021" tests="6">
    <testcase classname="
 Clean Function - Happy path tests
 should store cleaned events in the storage bucket and check credit field value" name="
 Clean Function - Happy path tests
 should store cleaned events in the storage bucket and check credit field value" time="1.677">
    </testcase>
    <testcase classname="
 Clean Function - Happy path tests
 should store cleaned events in the storage bucket and check credit field value" name="
 Clean Function - Happy path tests
 should store cleaned events in the storage bucket and check credit field value" time="1.576">
    </testcase>
    <testcase classname="
 Clean Function - Happy path tests
 should store cleaned events in the storage bucket and check credit field value" name="
 Clean Function - Happy path tests
 should store cleaned events in the storage bucket and check credit field value" time="1.478">
    </testcase>
    <testcase classname="
 Clean Function - Unhappy path tests
 should not store event with invalid ComponentId in the storage bucket" name="
 Clean Function - Unhappy path tests
 should not store event with invalid ComponentId in the storage bucket" time="7.141">
    </testcase>
    <testcase classname="
 Clean Function - Unhappy path tests
 should not store event with invalid Timestamp in the storage bucket" name="
 Clean Function - Unhappy path tests
 should not store event with invalid Timestamp in the storage bucket" time="7.14">
    </testcase>
    <testcase classname="
 Clean Function - Unhappy path tests
 should not store event with invalid timestamp formatted in the storage bucket" name="
 Clean Function - Unhappy path tests
 should not store event with invalid timestamp formatted in the storage bucket" time="7.12">
    </testcase>
  </testsuite>
  <testsuite name="Given a csv with event data is uploaded to the transaction csv bucket" errors="0" failures="0" skipped="0" timestamp="2023-09-20T15:03:08" time="10.272" tests="1">
    <testcase classname="Given a csv with event data is uploaded to the transaction csv bucket stores the events we care about in the storage bucket" name="Given a csv with event data is uploaded to the transaction csv bucket stores the events we care about in the storage bucket" time="1.86">
    </testcase>
  </testsuite>
  <testsuite name="
 Happy path tests 

 Generate valid event and check cloud watch logs lambda functions Filter,Clean, Store Transactions contains eventId
" errors="0" failures="0" skipped="0" timestamp="2023-09-20T15:03:18" time="15.241" tests="3">
    <testcase classname="
 Happy path tests 

 Generate valid event and check cloud watch logs lambda functions Filter,Clean, Store Transactions contains eventId
 Filter function cloud watch logs should contain eventid" name="
 Happy path tests 

 Generate valid event and check cloud watch logs lambda functions Filter,Clean, Store Transactions contains eventId
 Filter function cloud watch logs should contain eventid" time="9.325">
    </testcase>
    <testcase classname="
 Happy path tests 

 Generate valid event and check cloud watch logs lambda functions Filter,Clean, Store Transactions contains eventId
 Clean function cloud watch logs should contain eventid" name="
 Happy path tests 

 Generate valid event and check cloud watch logs lambda functions Filter,Clean, Store Transactions contains eventId
 Clean function cloud watch logs should contain eventid" time="1.4">
    </testcase>
    <testcase classname="
 Happy path tests 

 Generate valid event and check cloud watch logs lambda functions Filter,Clean, Store Transactions contains eventId
 Store Transactions function cloud watch logs should contain eventid" name="
 Happy path tests 

 Generate valid event and check cloud watch logs lambda functions Filter,Clean, Store Transactions contains eventId
 Store Transactions function cloud watch logs should contain eventid" time="1.284">
    </testcase>
  </testsuite>
  <testsuite name="
Upload events to s3 directly and check the transaction curated view 
" errors="0" failures="0" skipped="0" timestamp="2023-09-20T15:02:37" time="57.837" tests="4">
    <testcase classname="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_1_EVENT_1, vendor_testvendor1, 2, 2005/06/30 10:00" name="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_1_EVENT_1, vendor_testvendor1, 2, 2005/06/30 10:00" time="13.346">
    </testcase>
    <testcase classname="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_2_EVENT_2, vendor_testvendor2, 2, 2005/07/10 10:00" name="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_2_EVENT_2, vendor_testvendor2, 2, 2005/07/10 10:00" time="11.583">
    </testcase>
    <testcase classname="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_3_EVENT_4, vendor_testvendor3, 7, 2005/08/10 10:00" name="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_3_EVENT_4, vendor_testvendor3, 7, 2005/08/10 10:00" time="16.992">
    </testcase>
    <testcase classname="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_3_EVENT_6, vendor_testvendor3, 14, 2005/09/10 10:00" name="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_3_EVENT_6, vendor_testvendor3, 14, 2005/09/10 10:00" time="12.957">
    </testcase>
  </testsuite>
  <testsuite name="
 Unhappy path - Upload invalid pdf to the raw invoice bucket test
" errors="0" failures="0" skipped="0" timestamp="2023-09-20T15:03:34" time="4.282" tests="1">
    <testcase classname="
 Unhappy path - Upload invalid pdf to the raw invoice bucket test
 should move the original raw invoice to failed folder in s3 raw-invoice bucket upon uploading the invalid pdf file " name="
 Unhappy path - Upload invalid pdf to the raw invoice bucket test
 should move the original raw invoice to failed folder in s3 raw-invoice bucket upon uploading the invalid pdf file " time="2.926">
    </testcase>
  </testsuite>
  <testsuite name="
 Filter function - Happy path tests
" errors="0" failures="0" skipped="0" timestamp="2023-09-20T15:03:38" time="11.051" tests="2">
    <testcase classname="
 Filter function - Happy path tests
 should store event in the storage bucket for a valid event" name="
 Filter function - Happy path tests
 should store event in the storage bucket for a valid event" time="1.639">
    </testcase>
    <testcase classname="
 Filter Function - Unhappy path tests
 should not store events with invalid EventName in the storage bucket" name="
 Filter Function - Unhappy path tests
 should not store events with invalid EventName in the storage bucket" time="7.119">
    </testcase>
  </testsuite>
  <testsuite name="Execute athena query to retrieve rate details" errors="0" failures="0" skipped="0" timestamp="2023-09-20T15:03:35" time="15.739" tests="1">
    <testcase classname="Execute athena query to retrieve rate details retrieved rate details should match rate csv uploaded in s3 config bucket" name="Execute athena query to retrieve rate details retrieved rate details should match rate csv uploaded in s3 config bucket" time="12.886">
    </testcase>
  </testsuite>
  <testsuite name="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
" errors="0" failures="0" skipped="0" timestamp="2023-09-20T14:57:59" time="352.567" tests="5">
    <testcase classname="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty equals TransactionQty and No TransactionPrice No BillingPrice ,2,£0.00,2,£0.00,-1234567.01" name="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty equals TransactionQty and No TransactionPrice No BillingPrice ,2,£0.00,2,£0.00,-1234567.01" time="60.821">
    </testcase>
    <testcase classname="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty less than TransactionQty and No BillingPrice but has TransactionPrice ,2,£0.00,11,£27.50,-100.0" name="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty less than TransactionQty and No BillingPrice but has TransactionPrice ,2,£0.00,11,£27.50,-100.0" time="105.998">
    </testcase>
    <testcase classname="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty greater than TransactionQty and No TransactionPrice but has BillingPrice,11,£27.50,2,£0.00,-1234567.05" name="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty greater than TransactionQty and No TransactionPrice but has BillingPrice,11,£27.50,2,£0.00,-1234567.05" time="55.379">
    </testcase>
    <testcase classname="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty equals TransactionQty but BillingPrice greater than TransactionPrice,2,£6.66,2,£2.46,170.7317" name="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty equals TransactionQty but BillingPrice greater than TransactionPrice,2,£6.66,2,£2.46,170.7317" time="73.334">
    </testcase>
    <testcase classname="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty equals TransactionQty for quarterly invoice with different month but same quarter as events,2,£0.64,2,£0.64,0.0" name="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty equals TransactionQty for quarterly invoice with different month but same quarter as events,2,£0.64,2,£0.64,0.0" time="53.467">
    </testcase>
  </testsuite>
  <testsuite name="
 Execute athena query to retrieve vendor service details
" errors="0" failures="0" skipped="0" timestamp="2023-09-20T15:03:49" time="21.836" tests="1">
    <testcase classname="
 Execute athena query to retrieve vendor service details
 retrieved vendor service details should match with vendor service csv uploaded in s3 config bucket " name="
 Execute athena query to retrieve vendor service details
 retrieved vendor service details should match with vendor service csv uploaded in s3 config bucket " time="10.692">
    </testcase>
  </testsuite>
  <testsuite name="
 Execute athena query to retrieve contract details details
" errors="0" failures="0" skipped="0" timestamp="2023-09-20T15:03:51" time="27.897" tests="1">
    <testcase classname="
 Execute athena query to retrieve contract details details
 retrieved contract details should match with contract csv uploaded in s3 config bucket " name="
 Execute athena query to retrieve contract details details
 retrieved contract details should match with contract csv uploaded in s3 config bucket " time="12.501">
    </testcase>
  </testsuite>
  <testsuite name="
Generate valid event and execute athena query
" errors="0" failures="6" skipped="0" timestamp="2023-09-20T15:01:22" time="222.551" tests="14">
    <testcase classname="
Generate valid event and execute athena query
 should contain eventId in the generated query results" name="
Generate valid event and execute athena query
 should contain eventId in the generated query results" time="11.95">
    </testcase>
    <testcase classname="
Generate valid UTC+0 event at one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC+0 event at one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="11.761">
      <failure>Error: expect(received).toContain(expected) // indexOf

Expected substring: &quot;2061516&quot;
Received string:    &quot;[]&quot;
    at Object.&lt;anonymous&gt; (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/integration_tests/tests/athena-query-tests.ts:55:41)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)</failure>
    </testcase>
    <testcase classname="
Generate valid UTC+0 event at 59 minutes and 59 seconds after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC+0 event at 59 minutes and 59 seconds after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="11.688">
      <failure>Error: expect(received).toContain(expected) // indexOf

Expected substring: &quot;1237048&quot;
Received string:    &quot;[]&quot;
    at Object.&lt;anonymous&gt; (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/integration_tests/tests/athena-query-tests.ts:55:41)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)</failure>
    </testcase>
    <testcase classname="
Generate valid UTC+0 event at one hour and one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC+0 event at one hour and one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="11.862">
    </testcase>
    <testcase classname="
Generate valid UTC+0 event at one second after midnight on 1 Feb UTC+0 and execute athena query
 should contain eventId in the generated query results for February" name="
Generate valid UTC+0 event at one second after midnight on 1 Feb UTC+0 and execute athena query
 should contain eventId in the generated query results for February" time="11.764">
    </testcase>
    <testcase classname="
Generate valid UTC-6 event at one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC-6 event at one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="11.66">
      <failure>Error: expect(received).toContain(expected) // indexOf

Expected substring: &quot;1769989&quot;
Received string:    &quot;[{\&quot;vendor_id\&quot;:\&quot;vendor_testvendor1\&quot;,\&quot;event_id\&quot;:\&quot;4645163\&quot;,\&quot;event_name\&quot;:\&quot;VENDOR_1_EVENT_1\&quot;,\&quot;timestamp\&quot;:\&quot;2005-10-01 00:00:01.000\&quot;,\&quot;timestamp_formatted\&quot;:\&quot;2005-10-01 00:00:01+0\&quot;,\&quot;component_id\&quot;:\&quot;TEST_COMP\&quot;,\&quot;credits\&quot;:\&quot;1\&quot;,\&quot;year\&quot;:\&quot;2005\&quot;,\&quot;month\&quot;:\&quot;10\&quot;}]&quot;
    at Object.&lt;anonymous&gt; (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/integration_tests/tests/athena-query-tests.ts:55:41)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)</failure>
    </testcase>
    <testcase classname="
Generate valid UTC-6 event at 59 minutes and 59 seconds after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC-6 event at 59 minutes and 59 seconds after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="11.569">
      <failure>Error: expect(received).toContain(expected) // indexOf

Expected substring: &quot;6679935&quot;
Received string:    &quot;[{\&quot;vendor_id\&quot;:\&quot;vendor_testvendor1\&quot;,\&quot;event_id\&quot;:\&quot;4645163\&quot;,\&quot;event_name\&quot;:\&quot;VENDOR_1_EVENT_1\&quot;,\&quot;timestamp\&quot;:\&quot;2005-10-01 00:00:01.000\&quot;,\&quot;timestamp_formatted\&quot;:\&quot;2005-10-01 00:00:01+0\&quot;,\&quot;component_id\&quot;:\&quot;TEST_COMP\&quot;,\&quot;credits\&quot;:\&quot;1\&quot;,\&quot;year\&quot;:\&quot;2005\&quot;,\&quot;month\&quot;:\&quot;10\&quot;}]&quot;
    at Object.&lt;anonymous&gt; (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/integration_tests/tests/athena-query-tests.ts:55:41)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)</failure>
    </testcase>
    <testcase classname="
Generate valid UTC-6 event at one hour and one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC-6 event at one hour and one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="11.706">
    </testcase>
    <testcase classname="
Generate valid UTC-6 event at one second after midnight on 1 Feb UTC+0 and execute athena query
 should contain eventId in the generated query results for February" name="
Generate valid UTC-6 event at one second after midnight on 1 Feb UTC+0 and execute athena query
 should contain eventId in the generated query results for February" time="11.65">
    </testcase>
    <testcase classname="
Generate valid UTC+6 event at one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC+6 event at one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="11.978">
      <failure>Error: expect(received).toContain(expected) // indexOf

Expected substring: &quot;3153416&quot;
Received string:    &quot;[{\&quot;vendor_id\&quot;:\&quot;vendor_testvendor1\&quot;,\&quot;event_id\&quot;:\&quot;4645163\&quot;,\&quot;event_name\&quot;:\&quot;VENDOR_1_EVENT_1\&quot;,\&quot;timestamp\&quot;:\&quot;2005-10-01 00:00:01.000\&quot;,\&quot;timestamp_formatted\&quot;:\&quot;2005-10-01 00:00:01+0\&quot;,\&quot;component_id\&quot;:\&quot;TEST_COMP\&quot;,\&quot;credits\&quot;:\&quot;1\&quot;,\&quot;year\&quot;:\&quot;2005\&quot;,\&quot;month\&quot;:\&quot;10\&quot;},{\&quot;vendor_id\&quot;:\&quot;vendor_testvendor1\&quot;,\&quot;event_id\&quot;:\&quot;6573021\&quot;,\&quot;event_name\&quot;:\&quot;VENDOR_1_EVENT_1\&quot;,\&quot;timestamp\&quot;:\&quot;2005-10-01 00:00:01.000\&quot;,\&quot;timestamp_formatted\&quot;:\&quot;2005-09-30 18:00:01-6\&quot;,\&quot;component_id\&quot;:\&quot;TEST_COMP\&quot;,\&quot;credits\&quot;:\&quot;1\&quot;,\&quot;year\&quot;:\&quot;2005\&quot;,\&quot;month\&quot;:\&quot;10\&quot;}]&quot;
    at Object.&lt;anonymous&gt; (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/integration_tests/tests/athena-query-tests.ts:55:41)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)</failure>
    </testcase>
    <testcase classname="
Generate valid UTC+6 event at 59 minutes and 59 seconds after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC+6 event at 59 minutes and 59 seconds after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="11.789">
      <failure>Error: expect(received).toContain(expected) // indexOf

Expected substring: &quot;7841644&quot;
Received string:    &quot;[{\&quot;vendor_id\&quot;:\&quot;vendor_testvendor1\&quot;,\&quot;event_id\&quot;:\&quot;6573021\&quot;,\&quot;event_name\&quot;:\&quot;VENDOR_1_EVENT_1\&quot;,\&quot;timestamp\&quot;:\&quot;2005-10-01 00:00:01.000\&quot;,\&quot;timestamp_formatted\&quot;:\&quot;2005-09-30 18:00:01-6\&quot;,\&quot;component_id\&quot;:\&quot;TEST_COMP\&quot;,\&quot;credits\&quot;:\&quot;1\&quot;,\&quot;year\&quot;:\&quot;2005\&quot;,\&quot;month\&quot;:\&quot;10\&quot;},{\&quot;vendor_id\&quot;:\&quot;vendor_testvendor1\&quot;,\&quot;event_id\&quot;:\&quot;4645163\&quot;,\&quot;event_name\&quot;:\&quot;VENDOR_1_EVENT_1\&quot;,\&quot;timestamp\&quot;:\&quot;2005-10-01 00:00:01.000\&quot;,\&quot;timestamp_formatted\&quot;:\&quot;2005-10-01 00:00:01+0\&quot;,\&quot;component_id\&quot;:\&quot;TEST_COMP\&quot;,\&quot;credits\&quot;:\&quot;1\&quot;,\&quot;year\&quot;:\&quot;2005\&quot;,\&quot;month\&quot;:\&quot;10\&quot;}]&quot;
    at Object.&lt;anonymous&gt; (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/integration_tests/tests/athena-query-tests.ts:55:41)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)</failure>
    </testcase>
    <testcase classname="
Generate valid UTC+6 event at one hour and one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC+6 event at one hour and one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="11.757">
    </testcase>
    <testcase classname="
Generate valid UTC+6 event at one second after midnight on 1 Feb UTC+0 and execute athena query
 should contain eventId in the generated query results for February" name="
Generate valid UTC+6 event at one second after midnight on 1 Feb UTC+0 and execute athena query
 should contain eventId in the generated query results for February" time="11.797">
    </testcase>
    <testcase classname="
Generate invalid event and execute athena query
 should not contain eventId in the generated query results" name="
Generate invalid event and execute athena query
 should not contain eventId in the generated query results" time="17.908">
    </testcase>
  </testsuite>
  <testsuite name="
 Invoice data buckets exists in S3
" errors="0" failures="0" skipped="0" timestamp="2023-09-20T15:03:52" time="131.6" tests="3">
    <testcase classname="
 Invoice data buckets exists in S3
 Raw invoice bucket should exists in S3" name="
 Invoice data buckets exists in S3
 Raw invoice bucket should exists in S3" time="0.622">
    </testcase>
    <testcase classname="
 Invoice data buckets exists in S3
 Raw invoice textract data bucket should exists in S3" name="
 Invoice data buckets exists in S3
 Raw invoice textract data bucket should exists in S3" time="0.195">
    </testcase>
    <testcase classname="
 Invoice data buckets exists in S3
 Storage bucket should exists in S3" name="
 Invoice data buckets exists in S3
 Storage bucket should exists in S3" time="0.297">
    </testcase>
  </testsuite>
  <testsuite name="
 Store function test
" errors="0" failures="0" skipped="0" timestamp="2023-09-20T15:04:11" time="126.073" tests="1">
    <testcase classname="
 Store function test
 should store cleaned events in the storage bucket" name="
 Store function test
 should store cleaned events in the storage bucket" time="1.912">
    </testcase>
  </testsuite>
  <testsuite name="
 Verify VAT details exists in S3 config bucket
" errors="0" failures="0" skipped="0" timestamp="2023-09-20T15:04:20" time="119.089" tests="1">
    <testcase classname="
 Verify VAT details exists in S3 config bucket
 S3 config bucket should contain VAT details matches with expected vat config file " name="
 Verify VAT details exists in S3 config bucket
 S3 config bucket should contain VAT details matches with expected vat config file " time="0.487">
    </testcase>
  </testsuite>
</testsuites>