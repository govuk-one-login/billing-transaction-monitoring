<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="58" failures="3" errors="0" time="470.239">
  <testsuite name="Email" errors="0" failures="0" skipped="0" timestamp="2023-09-15T16:41:21" time="113.131" tests="5">
    <testcase classname="Email CSV attachment" name="Email CSV attachment" time="5.164">
    </testcase>
    <testcase classname="Email PDF attachment" name="Email PDF attachment" time="2.754">
    </testcase>
    <testcase classname="Email CSV and PDF" name="Email CSV and PDF" time="2.665">
    </testcase>
    <testcase classname="Email CSV, PDF and JPEG" name="Email CSV, PDF and JPEG" time="1.476">
    </testcase>
    <testcase classname="Email Various attachments" name="Email Various attachments" time="2.614">
    </testcase>
  </testsuite>
  <testsuite name="New invoice with same month, vendor, service as old line item" errors="0" failures="0" skipped="0" timestamp="2023-09-15T16:41:21" time="272.103" tests="1">
    <testcase classname="New invoice with same month, vendor, service as old line item should archive old line item" name="New invoice with same month, vendor, service as old line item should archive old line item" time="165.158">
    </testcase>
  </testsuite>
  <testsuite name="
 DashboardDataExtractFunction" errors="0" failures="0" skipped="0" timestamp="2023-09-15T16:41:21" time="335.077" tests="2">
    <testcase classname="
 DashboardDataExtractFunction should save an updated full-extract.json file, which is reflected in the btm_monthly_extract table, when standardised non-quarterly invoice data is stored in s3" name="
 DashboardDataExtractFunction should save an updated full-extract.json file, which is reflected in the btm_monthly_extract table, when standardised non-quarterly invoice data is stored in s3" time="82.121">
    </testcase>
    <testcase classname="
 DashboardDataExtractFunction should save an updated full-extract.json file, which is reflected in the btm_monthly_extract table, when standardised quarterly invoice data is stored in s3" name="
 DashboardDataExtractFunction should save an updated full-extract.json file, which is reflected in the btm_monthly_extract table, when standardised quarterly invoice data is stored in s3" time="151.164">
    </testcase>
  </testsuite>
  <testsuite name="
 Upload invoice standardised data to s3 directly and check the billing curated view" errors="0" failures="0" skipped="0" timestamp="2023-09-15T16:46:56" time="23.98" tests="1">
    <testcase classname="
 Upload invoice standardised data to s3 directly and check the billing curated view Uploaded invoice standardised data should match the results from billing curated view" name="
 Upload invoice standardised data to s3 directly and check the billing curated view Uploaded invoice standardised data should match the results from billing curated view" time="21.475">
    </testcase>
  </testsuite>
  <testsuite name="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
" errors="0" failures="0" skipped="0" timestamp="2023-09-15T16:41:21" time="394.907" tests="4">
    <testcase classname="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid non-quarterly pdf file in raw-invoice bucket and see that we can see the data in the view" name="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid non-quarterly pdf file in raw-invoice bucket and see that we can see the data in the view" time="133.3">
    </testcase>
    <testcase classname="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid quarterly pdf file in raw-invoice bucket and see that we can see the data in the view" name="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid quarterly pdf file in raw-invoice bucket and see that we can see the data in the view" time="72.807">
    </testcase>
    <testcase classname="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid non-quarterly csv file in raw-invoice bucket and check that we can see the data in the view" name="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid non-quarterly csv file in raw-invoice bucket and check that we can see the data in the view" time="51.116">
    </testcase>
    <testcase classname="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid quarterly csv file in raw-invoice bucket and check that we can see the data in the view" name="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid quarterly csv file in raw-invoice bucket and check that we can see the data in the view" time="31.081">
    </testcase>
  </testsuite>
  <testsuite name="
 Synthetic Events Generation Tests
" errors="0" failures="1" skipped="0" timestamp="2023-09-15T16:47:56" time="16.846" tests="1">
    <testcase classname="
 Synthetic Events Generation Tests
 should validate the events in the transaction_standardised table contain all required fields when the current date is between start_date and end_date" name="
 Synthetic Events Generation Tests
 should validate the events in the transaction_standardised table contain all required fields when the current date is between start_date and end_date" time="10.258">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 1
Received: 0
    at Object.&lt;anonymous&gt; (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/integration_tests/tests/synthetic-events-tests.ts:44:33)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)</failure>
    </testcase>
  </testsuite>
  <testsuite name="
Upload events to s3 directly and check the transaction curated view 
" errors="0" failures="0" skipped="0" timestamp="2023-09-15T16:47:20" time="54.055" tests="4">
    <testcase classname="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_1_EVENT_1, vendor_testvendor1, 2, 2005/06/30 10:00" name="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_1_EVENT_1, vendor_testvendor1, 2, 2005/06/30 10:00" time="11.878">
    </testcase>
    <testcase classname="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_2_EVENT_2, vendor_testvendor2, 2, 2005/07/10 10:00" name="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_2_EVENT_2, vendor_testvendor2, 2, 2005/07/10 10:00" time="13.108">
    </testcase>
    <testcase classname="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_3_EVENT_4, vendor_testvendor3, 7, 2005/08/10 10:00" name="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_3_EVENT_4, vendor_testvendor3, 7, 2005/08/10 10:00" time="13.142">
    </testcase>
    <testcase classname="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_3_EVENT_6, vendor_testvendor3, 14, 2005/09/10 10:00" name="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_3_EVENT_6, vendor_testvendor3, 14, 2005/09/10 10:00" time="14.435">
    </testcase>
  </testsuite>
  <testsuite name="Given a csv with event data is uploaded to the transaction csv bucket" errors="0" failures="0" skipped="0" timestamp="2023-09-15T16:48:14" time="10.667" tests="1">
    <testcase classname="Given a csv with event data is uploaded to the transaction csv bucket stores the events we care about in the storage bucket" name="Given a csv with event data is uploaded to the transaction csv bucket stores the events we care about in the storage bucket" time="2.178">
    </testcase>
  </testsuite>
  <testsuite name="
 Happy path tests 

 Generate valid event and check cloud watch logs lambda functions Filter,Clean, Store Transactions contains eventId
" errors="0" failures="0" skipped="0" timestamp="2023-09-15T16:48:24" time="13.143" tests="3">
    <testcase classname="
 Happy path tests 

 Generate valid event and check cloud watch logs lambda functions Filter,Clean, Store Transactions contains eventId
 Filter function cloud watch logs should contain eventid" name="
 Happy path tests 

 Generate valid event and check cloud watch logs lambda functions Filter,Clean, Store Transactions contains eventId
 Filter function cloud watch logs should contain eventid" time="1.625">
    </testcase>
    <testcase classname="
 Happy path tests 

 Generate valid event and check cloud watch logs lambda functions Filter,Clean, Store Transactions contains eventId
 Clean function cloud watch logs should contain eventid" name="
 Happy path tests 

 Generate valid event and check cloud watch logs lambda functions Filter,Clean, Store Transactions contains eventId
 Clean function cloud watch logs should contain eventid" time="6.408">
    </testcase>
    <testcase classname="
 Happy path tests 

 Generate valid event and check cloud watch logs lambda functions Filter,Clean, Store Transactions contains eventId
 Store Transactions function cloud watch logs should contain eventid" name="
 Happy path tests 

 Generate valid event and check cloud watch logs lambda functions Filter,Clean, Store Transactions contains eventId
 Store Transactions function cloud watch logs should contain eventid" time="1.347">
    </testcase>
  </testsuite>
  <testsuite name="
 Clean Function - Happy path tests
" errors="0" failures="0" skipped="0" timestamp="2023-09-15T16:48:13" time="27.531" tests="6">
    <testcase classname="
 Clean Function - Happy path tests
 should store cleaned events in the storage bucket and check credit field value" name="
 Clean Function - Happy path tests
 should store cleaned events in the storage bucket and check credit field value" time="2.249">
    </testcase>
    <testcase classname="
 Clean Function - Happy path tests
 should store cleaned events in the storage bucket and check credit field value" name="
 Clean Function - Happy path tests
 should store cleaned events in the storage bucket and check credit field value" time="1.279">
    </testcase>
    <testcase classname="
 Clean Function - Happy path tests
 should store cleaned events in the storage bucket and check credit field value" name="
 Clean Function - Happy path tests
 should store cleaned events in the storage bucket and check credit field value" time="1.322">
    </testcase>
    <testcase classname="
 Clean Function - Unhappy path tests
 should not store event with invalid ComponentId in the storage bucket" name="
 Clean Function - Unhappy path tests
 should not store event with invalid ComponentId in the storage bucket" time="7.085">
    </testcase>
    <testcase classname="
 Clean Function - Unhappy path tests
 should not store event with invalid Timestamp in the storage bucket" name="
 Clean Function - Unhappy path tests
 should not store event with invalid Timestamp in the storage bucket" time="7.085">
    </testcase>
    <testcase classname="
 Clean Function - Unhappy path tests
 should not store event with invalid timestamp formatted in the storage bucket" name="
 Clean Function - Unhappy path tests
 should not store event with invalid timestamp formatted in the storage bucket" time="7.085">
    </testcase>
  </testsuite>
  <testsuite name="
 Unhappy path - Upload invalid pdf to the raw invoice bucket test
" errors="0" failures="0" skipped="0" timestamp="2023-09-15T16:48:38" time="6.272" tests="1">
    <testcase classname="
 Unhappy path - Upload invalid pdf to the raw invoice bucket test
 should move the original raw invoice to failed folder in s3 raw-invoice bucket upon uploading the invalid pdf file " name="
 Unhappy path - Upload invalid pdf to the raw invoice bucket test
 should move the original raw invoice to failed folder in s3 raw-invoice bucket upon uploading the invalid pdf file " time="4.88">
    </testcase>
  </testsuite>
  <testsuite name="
Generate valid event and execute athena query
" errors="0" failures="0" skipped="0" timestamp="2023-09-15T16:45:53" time="174.52" tests="14">
    <testcase classname="
Generate valid event and execute athena query
 should contain eventId in the generated query results" name="
Generate valid event and execute athena query
 should contain eventId in the generated query results" time="12.366">
    </testcase>
    <testcase classname="
Generate valid UTC+0 event at one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC+0 event at one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="11.728">
    </testcase>
    <testcase classname="
Generate valid UTC+0 event at 59 minutes and 59 seconds after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC+0 event at 59 minutes and 59 seconds after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="11.687">
    </testcase>
    <testcase classname="
Generate valid UTC+0 event at one hour and one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC+0 event at one hour and one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="11.755">
    </testcase>
    <testcase classname="
Generate valid UTC+0 event at one second after midnight on 1 Feb UTC+0 and execute athena query
 should contain eventId in the generated query results for February" name="
Generate valid UTC+0 event at one second after midnight on 1 Feb UTC+0 and execute athena query
 should contain eventId in the generated query results for February" time="11.747">
    </testcase>
    <testcase classname="
Generate valid UTC-6 event at one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC-6 event at one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="11.745">
    </testcase>
    <testcase classname="
Generate valid UTC-6 event at 59 minutes and 59 seconds after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC-6 event at 59 minutes and 59 seconds after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="11.687">
    </testcase>
    <testcase classname="
Generate valid UTC-6 event at one hour and one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC-6 event at one hour and one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="11.704">
    </testcase>
    <testcase classname="
Generate valid UTC-6 event at one second after midnight on 1 Feb UTC+0 and execute athena query
 should contain eventId in the generated query results for February" name="
Generate valid UTC-6 event at one second after midnight on 1 Feb UTC+0 and execute athena query
 should contain eventId in the generated query results for February" time="11.726">
    </testcase>
    <testcase classname="
Generate valid UTC+6 event at one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC+6 event at one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="11.69">
    </testcase>
    <testcase classname="
Generate valid UTC+6 event at 59 minutes and 59 seconds after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC+6 event at 59 minutes and 59 seconds after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="11.71">
    </testcase>
    <testcase classname="
Generate valid UTC+6 event at one hour and one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC+6 event at one hour and one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="11.696">
    </testcase>
    <testcase classname="
Generate valid UTC+6 event at one second after midnight on 1 Feb UTC+0 and execute athena query
 should contain eventId in the generated query results for February" name="
Generate valid UTC+6 event at one second after midnight on 1 Feb UTC+0 and execute athena query
 should contain eventId in the generated query results for February" time="11.696">
    </testcase>
    <testcase classname="
Generate invalid event and execute athena query
 should not contain eventId in the generated query results" name="
Generate invalid event and execute athena query
 should not contain eventId in the generated query results" time="17.347">
    </testcase>
  </testsuite>
  <testsuite name="Execute athena query to retrieve rate details" errors="0" failures="0" skipped="0" timestamp="2023-09-15T16:48:40" time="12.731" tests="1">
    <testcase classname="Execute athena query to retrieve rate details retrieved rate details should match rate csv uploaded in s3 config bucket" name="Execute athena query to retrieve rate details retrieved rate details should match rate csv uploaded in s3 config bucket" time="10.646">
    </testcase>
  </testsuite>
  <testsuite name="
 Filter function - Happy path tests
" errors="0" failures="0" skipped="0" timestamp="2023-09-15T16:48:44" time="10.559" tests="2">
    <testcase classname="
 Filter function - Happy path tests
 should store event in the storage bucket for a valid event" name="
 Filter function - Happy path tests
 should store event in the storage bucket for a valid event" time="2.11">
    </testcase>
    <testcase classname="
 Filter Function - Unhappy path tests
 should not store events with invalid EventName in the storage bucket" name="
 Filter Function - Unhappy path tests
 should not store events with invalid EventName in the storage bucket" time="7.086">
    </testcase>
  </testsuite>
  <testsuite name="
 Invoice data buckets exists in S3
" errors="0" failures="0" skipped="0" timestamp="2023-09-15T16:48:53" time="2.627" tests="3">
    <testcase classname="
 Invoice data buckets exists in S3
 Raw invoice bucket should exists in S3" name="
 Invoice data buckets exists in S3
 Raw invoice bucket should exists in S3" time="0.373">
    </testcase>
    <testcase classname="
 Invoice data buckets exists in S3
 Raw invoice textract data bucket should exists in S3" name="
 Invoice data buckets exists in S3
 Raw invoice textract data bucket should exists in S3" time="0.401">
    </testcase>
    <testcase classname="
 Invoice data buckets exists in S3
 Storage bucket should exists in S3" name="
 Invoice data buckets exists in S3
 Storage bucket should exists in S3" time="0.369">
    </testcase>
  </testsuite>
  <testsuite name="
 Execute athena query to retrieve vendor service details
" errors="0" failures="0" skipped="0" timestamp="2023-09-15T16:48:48" time="12.121" tests="1">
    <testcase classname="
 Execute athena query to retrieve vendor service details
 retrieved vendor service details should match with vendor service csv uploaded in s3 config bucket " name="
 Execute athena query to retrieve vendor service details
 retrieved vendor service details should match with vendor service csv uploaded in s3 config bucket " time="10.62">
    </testcase>
  </testsuite>
  <testsuite name="
 Verify VAT details exists in S3 config bucket
" errors="0" failures="0" skipped="0" timestamp="2023-09-15T16:49:00" time="4.511" tests="1">
    <testcase classname="
 Verify VAT details exists in S3 config bucket
 S3 config bucket should contain VAT details matches with expected vat config file " name="
 Verify VAT details exists in S3 config bucket
 S3 config bucket should contain VAT details matches with expected vat config file " time="0.981">
    </testcase>
  </testsuite>
  <testsuite name="
 Store function test
" errors="0" failures="1" skipped="0" timestamp="2023-09-15T16:48:55" time="10.505" tests="1">
    <testcase classname="
 Store function test
 should store cleaned events in the storage bucket" name="
 Store function test
 should store cleaned events in the storage bucket" time="7.747">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: true
Received: false
    at Object.&lt;anonymous&gt; (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/integration_tests/tests/storage-function-tests.ts:11:28)</failure>
    </testcase>
  </testsuite>
  <testsuite name="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
" errors="0" failures="1" skipped="0" timestamp="2023-09-15T16:43:14" time="354.616" tests="5">
    <testcase classname="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty equals TransactionQty and No TransactionPrice No BillingPrice ,2,£0.00,2,£0.00,-1234567.01" name="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty equals TransactionQty and No TransactionPrice No BillingPrice ,2,£0.00,2,£0.00,-1234567.01" time="60.069">
    </testcase>
    <testcase classname="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty less than TransactionQty and No BillingPrice but has TransactionPrice ,2,£0.00,11,£27.50,-100.0" name="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty less than TransactionQty and No BillingPrice but has TransactionPrice ,2,£0.00,11,£27.50,-100.0" time="89.446">
    </testcase>
    <testcase classname="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty greater than TransactionQty and No TransactionPrice but has BillingPrice,11,£27.50,2,£0.00,-1234567.05" name="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty greater than TransactionQty and No TransactionPrice but has BillingPrice,11,£27.50,2,£0.00,-1234567.05" time="94.048">
    </testcase>
    <testcase classname="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty equals TransactionQty but BillingPrice greater than TransactionPrice,2,£6.66,2,£2.46,170.7317" name="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty equals TransactionQty but BillingPrice greater than TransactionPrice,2,£6.66,2,£2.46,170.7317" time="74.042">
    </testcase>
    <testcase classname="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty equals TransactionQty for quarterly invoice with different month but same quarter as events,2,£0.64,2,£0.64,0.0" name="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty equals TransactionQty for quarterly invoice with different month but same quarter as events,2,£0.64,2,£0.64,0.0" time="34.058">
      <failure>Error: expect(received).toEqual(expected) // deep equality

Expected: &quot;£0.64&quot;
Received: &quot;£4,110.94&quot;
    at assertQueryResultWithTestData (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/integration_tests/tests/billing-and-transaction-view-tests.ts:88:47)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)
    at /home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/integration_tests/tests/billing-and-transaction-view-tests.ts:57:7</failure>
    </testcase>
  </testsuite>
  <testsuite name="
 Execute athena query to retrieve contract details details
" errors="0" failures="0" skipped="0" timestamp="2023-09-15T16:48:54" time="14.46" tests="1">
    <testcase classname="
 Execute athena query to retrieve contract details details
 retrieved contract details should match with contract csv uploaded in s3 config bucket " name="
 Execute athena query to retrieve contract details details
 retrieved contract details should match with contract csv uploaded in s3 config bucket " time="10.733">
    </testcase>
  </testsuite>
</testsuites>