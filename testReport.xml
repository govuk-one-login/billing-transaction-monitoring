<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="58" failures="4" errors="0" time="1385.391">
  <testsuite name="Email" errors="0" failures="0" skipped="0" timestamp="2023-09-14T13:42:47" time="261.299" tests="5">
    <testcase classname="Email CSV attachment" name="Email CSV attachment" time="5.804">
    </testcase>
    <testcase classname="Email PDF attachment" name="Email PDF attachment" time="4.826">
    </testcase>
    <testcase classname="Email CSV and PDF" name="Email CSV and PDF" time="2.041">
    </testcase>
    <testcase classname="Email CSV, PDF and JPEG" name="Email CSV, PDF and JPEG" time="1.777">
    </testcase>
    <testcase classname="Email Various attachments" name="Email Various attachments" time="2.637">
    </testcase>
  </testsuite>
  <testsuite name="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
" errors="0" failures="0" skipped="0" timestamp="2023-09-14T13:42:47" time="413.099" tests="4">
    <testcase classname="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid non-quarterly pdf file in raw-invoice bucket and see that we can see the data in the view" name="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid non-quarterly pdf file in raw-invoice bucket and see that we can see the data in the view" time="83.446">
    </testcase>
    <testcase classname="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid quarterly pdf file in raw-invoice bucket and see that we can see the data in the view" name="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid quarterly pdf file in raw-invoice bucket and see that we can see the data in the view" time="51.513">
    </testcase>
    <testcase classname="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid non-quarterly csv file in raw-invoice bucket and check that we can see the data in the view" name="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid non-quarterly csv file in raw-invoice bucket and check that we can see the data in the view" time="66.994">
    </testcase>
    <testcase classname="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid quarterly csv file in raw-invoice bucket and check that we can see the data in the view" name="
 Happy path - Upload valid mock invoice and verify data is seen in the billing view
 upload valid quarterly csv file in raw-invoice bucket and check that we can see the data in the view" time="43.299">
    </testcase>
  </testsuite>
  <testsuite name="New invoice with same month, vendor, service as old line item" errors="0" failures="1" skipped="0" timestamp="2023-09-14T13:42:47" time="429.998" tests="1">
    <testcase classname="New invoice with same month, vendor, service as old line item should archive old line item" name="New invoice with same month, vendor, service as old line item should archive old line item" time="272.84">
      <failure>Error: Error: Ran out of retries
    at /home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/src/handlers/int-test-support/helpers/commonHelpers.ts:71:18</failure>
      <failure>Error: Ran out of retries
    at /home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/src/handlers/int-test-support/helpers/call-wrappers.ts:51:13
    at /home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/src/handlers/int-test-support/helpers/call-wrappers.ts:61:24
    at runNextTicks (node:internal/process/task_queues:61:5)
    at listOnTimeout (node:internal/timers:528:9)
    at processTimers (node:internal/timers:502:7)
    at /home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/src/handlers/int-test-support/helpers/call-wrappers.ts:58:18
    at /home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/src/handlers/int-test-support/helpers/call-wrappers.ts:58:18
    at listS3Keys (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/integration_tests/tests/s3-invoice-standardised-line-item-tests.ts:206:18)
    at /home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/integration_tests/tests/s3-invoice-standardised-line-item-tests.ts:133:23
    at async Promise.all (index 0)
    at deleteExisting (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/integration_tests/tests/s3-invoice-standardised-line-item-tests.ts:136:21)
    at deletePdf (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/integration_tests/tests/s3-invoice-standardised-line-item-tests.ts:175:3)
    at async Promise.all (index 0)
    at deleteInvoice (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/integration_tests/tests/s3-invoice-standardised-line-item-tests.ts:151:3)
    at async Promise.all (index 0)
    at Object.&lt;anonymous&gt; (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/integration_tests/tests/s3-invoice-standardised-line-item-tests.ts:124:5)</failure>
    </testcase>
  </testsuite>
  <testsuite name="
 DashboardDataExtractFunction" errors="0" failures="1" skipped="0" timestamp="2023-09-14T13:42:47" time="737.133" tests="2">
    <testcase classname="
 DashboardDataExtractFunction should save an updated full-extract.json file, which is reflected in the btm_monthly_extract table, when standardised non-quarterly invoice data is stored in s3" name="
 DashboardDataExtractFunction should save an updated full-extract.json file, which is reflected in the btm_monthly_extract table, when standardised non-quarterly invoice data is stored in s3" time="175.241">
    </testcase>
    <testcase classname="
 DashboardDataExtractFunction should save an updated full-extract.json file, which is reflected in the btm_monthly_extract table, when standardised quarterly invoice data is stored in s3" name="
 DashboardDataExtractFunction should save an updated full-extract.json file, which is reflected in the btm_monthly_extract table, when standardised quarterly invoice data is stored in s3" time="330.849">
      <failure>Error: Failed: &quot;Query did not succeed within the given timeout&quot;
    at Env.it (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:113:24)
    at it (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-jasmine2/build/jasmine/jasmineLight.js:98:21)
    at /home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-each/build/bind.js:47:15
    at Array.forEach (&lt;anonymous&gt;)
    at eachBind (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-each/build/bind.js:39:22)
    at Suite.&lt;anonymous&gt; (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/integration_tests/tests/dashboard-data-extraction-tests.ts:21:4)
    at addSpecsToSuite (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-jasmine2/build/jasmine/Env.js:356:49)
    at Env.describe (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-jasmine2/build/jasmine/Env.js:331:9)
    at describe (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-jasmine2/build/jasmine/jasmineLight.js:89:18)
    at Object.&lt;anonymous&gt; (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/integration_tests/tests/dashboard-data-extraction-tests.ts:16:1)
    at Runtime._execModule (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-runtime/build/index.js:1452:24)
    at Runtime._loadModule (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-runtime/build/index.js:1024:12)
    at Runtime.requireModule (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-runtime/build/index.js:884:12)
    at jasmine2 (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-jasmine2/build/index.js:195:13)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)
    at runTestInternal (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-runner/build/runTest.js:367:16)
    at runTest (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-runner/build/runTest.js:444:34)
    at Object.worker (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-runner/build/testWorker.js:106:12)</failure>
    </testcase>
  </testsuite>
  <testsuite name="
 Upload invoice standardised data to s3 directly and check the billing curated view" errors="0" failures="1" skipped="0" timestamp="2023-09-14T13:49:58" time="321.362" tests="1">
    <testcase classname="
 Upload invoice standardised data to s3 directly and check the billing curated view Uploaded invoice standardised data should match the results from billing curated view" name="
 Upload invoice standardised data to s3 directly and check the billing curated view Uploaded invoice standardised data should match the results from billing curated view" time="180.9">
      <failure>Error: Ran out of retries
    at /home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/src/handlers/int-test-support/helpers/call-wrappers.ts:51:13
    at /home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/src/handlers/int-test-support/helpers/call-wrappers.ts:61:24
    at /home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/src/handlers/int-test-support/helpers/call-wrappers.ts:58:18
    at /home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/src/handlers/int-test-support/helpers/call-wrappers.ts:58:18
    at Object.&lt;anonymous&gt; (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/integration_tests/tests/billing-curated-view-tests.ts:75:7)</failure>
    </testcase>
  </testsuite>
  <testsuite name="
Generate valid event and execute athena query
" errors="0" failures="0" skipped="0" timestamp="2023-09-14T13:49:47" time="552.25" tests="14">
    <testcase classname="
Generate valid event and execute athena query
 should contain eventId in the generated query results" name="
Generate valid event and execute athena query
 should contain eventId in the generated query results" time="180.352">
    </testcase>
    <testcase classname="
Generate valid UTC+0 event at one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC+0 event at one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="13.553">
    </testcase>
    <testcase classname="
Generate valid UTC+0 event at 59 minutes and 59 seconds after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC+0 event at 59 minutes and 59 seconds after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="15.93">
    </testcase>
    <testcase classname="
Generate valid UTC+0 event at one hour and one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC+0 event at one hour and one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="10.76">
    </testcase>
    <testcase classname="
Generate valid UTC+0 event at one second after midnight on 1 Feb UTC+0 and execute athena query
 should contain eventId in the generated query results for February" name="
Generate valid UTC+0 event at one second after midnight on 1 Feb UTC+0 and execute athena query
 should contain eventId in the generated query results for February" time="15.792">
    </testcase>
    <testcase classname="
Generate valid UTC-6 event at one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC-6 event at one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="17.208">
    </testcase>
    <testcase classname="
Generate valid UTC-6 event at 59 minutes and 59 seconds after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC-6 event at 59 minutes and 59 seconds after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="15.7">
    </testcase>
    <testcase classname="
Generate valid UTC-6 event at one hour and one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC-6 event at one hour and one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="17.557">
    </testcase>
    <testcase classname="
Generate valid UTC-6 event at one second after midnight on 1 Feb UTC+0 and execute athena query
 should contain eventId in the generated query results for February" name="
Generate valid UTC-6 event at one second after midnight on 1 Feb UTC+0 and execute athena query
 should contain eventId in the generated query results for February" time="13.706">
    </testcase>
    <testcase classname="
Generate valid UTC+6 event at one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC+6 event at one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="18.227">
    </testcase>
    <testcase classname="
Generate valid UTC+6 event at 59 minutes and 59 seconds after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC+6 event at 59 minutes and 59 seconds after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="17.77">
    </testcase>
    <testcase classname="
Generate valid UTC+6 event at one hour and one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" name="
Generate valid UTC+6 event at one hour and one second after midnight on 1 Oct UTC+1 and execute athena query
 should contain eventId in the generated query results for October" time="16.843">
    </testcase>
    <testcase classname="
Generate valid UTC+6 event at one second after midnight on 1 Feb UTC+0 and execute athena query
 should contain eventId in the generated query results for February" name="
Generate valid UTC+6 event at one second after midnight on 1 Feb UTC+0 and execute athena query
 should contain eventId in the generated query results for February" time="11.939">
    </testcase>
    <testcase classname="
Generate invalid event and execute athena query
 should not contain eventId in the generated query results" name="
Generate invalid event and execute athena query
 should not contain eventId in the generated query results" time="19.494">
    </testcase>
  </testsuite>
  <testsuite name="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
" errors="0" failures="0" skipped="0" timestamp="2023-09-14T13:47:14" time="773.055" tests="5">
    <testcase classname="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty equals TransactionQty and No TransactionPrice No BillingPrice ,2,£0.00,2,£0.00,-1234567.01" name="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty equals TransactionQty and No TransactionPrice No BillingPrice ,2,£0.00,2,£0.00,-1234567.01" time="225.492">
    </testcase>
    <testcase classname="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty less than TransactionQty and No BillingPrice but has TransactionPrice ,2,£0.00,11,£27.50,-100.0" name="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty less than TransactionQty and No BillingPrice but has TransactionPrice ,2,£0.00,11,£27.50,-100.0" time="108.608">
    </testcase>
    <testcase classname="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty greater than TransactionQty and No TransactionPrice but has BillingPrice,11,£27.50,2,£0.00,-1234567.05" name="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty greater than TransactionQty and No TransactionPrice but has BillingPrice,11,£27.50,2,£0.00,-1234567.05" time="57.241">
    </testcase>
    <testcase classname="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty equals TransactionQty but BillingPrice greater than TransactionPrice,2,£6.66,2,£2.46,170.7317" name="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty equals TransactionQty but BillingPrice greater than TransactionPrice,2,£6.66,2,£2.46,170.7317" time="35.913">
    </testcase>
    <testcase classname="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty equals TransactionQty for quarterly invoice with different month but same quarter as events,2,£0.64,2,£0.64,0.0" name="
Upload pdf invoice to raw invoice bucket and verify BillingAndTransactionsCuratedView results matches with expected data 
 results retrieved from billing and transaction_curated view query should match with expected BillingQty equals TransactionQty for quarterly invoice with different month but same quarter as events,2,£0.64,2,£0.64,0.0" time="36.987">
    </testcase>
  </testsuite>
  <testsuite name="
 Clean Function - Happy path tests
" errors="0" failures="0" skipped="0" timestamp="2023-09-14T13:59:01" time="96.003" tests="6">
    <testcase classname="
 Clean Function - Happy path tests
 should store cleaned events in the storage bucket and check credit field value" name="
 Clean Function - Happy path tests
 should store cleaned events in the storage bucket and check credit field value" time="6.08">
    </testcase>
    <testcase classname="
 Clean Function - Happy path tests
 should store cleaned events in the storage bucket and check credit field value" name="
 Clean Function - Happy path tests
 should store cleaned events in the storage bucket and check credit field value" time="1.5">
    </testcase>
    <testcase classname="
 Clean Function - Happy path tests
 should store cleaned events in the storage bucket and check credit field value" name="
 Clean Function - Happy path tests
 should store cleaned events in the storage bucket and check credit field value" time="1.766">
    </testcase>
    <testcase classname="
 Clean Function - Unhappy path tests
 should not store event with invalid ComponentId in the storage bucket" name="
 Clean Function - Unhappy path tests
 should not store event with invalid ComponentId in the storage bucket" time="7.957">
    </testcase>
    <testcase classname="
 Clean Function - Unhappy path tests
 should not store event with invalid Timestamp in the storage bucket" name="
 Clean Function - Unhappy path tests
 should not store event with invalid Timestamp in the storage bucket" time="7.14">
    </testcase>
    <testcase classname="
 Clean Function - Unhappy path tests
 should not store event with invalid timestamp formatted in the storage bucket" name="
 Clean Function - Unhappy path tests
 should not store event with invalid timestamp formatted in the storage bucket" time="7.762">
    </testcase>
  </testsuite>
  <testsuite name="Given a csv with event data is uploaded to the transaction csv bucket" errors="0" failures="0" skipped="0" timestamp="2023-09-14T14:00:07" time="109.268" tests="1">
    <testcase classname="Given a csv with event data is uploaded to the transaction csv bucket stores the events we care about in the storage bucket" name="Given a csv with event data is uploaded to the transaction csv bucket stores the events we care about in the storage bucket" time="14.657">
    </testcase>
  </testsuite>
  <testsuite name="
Upload events to s3 directly and check the transaction curated view 
" errors="0" failures="1" skipped="0" timestamp="2023-09-14T13:55:06" time="409.819" tests="4">
    <testcase classname="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_1_EVENT_1, vendor_testvendor1, 2, 2005/06/30 10:00" name="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_1_EVENT_1, vendor_testvendor1, 2, 2005/06/30 10:00" time="15.742">
    </testcase>
    <testcase classname="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_2_EVENT_2, vendor_testvendor2, 2, 2005/07/10 10:00" name="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_2_EVENT_2, vendor_testvendor2, 2, 2005/07/10 10:00" time="14.775">
    </testcase>
    <testcase classname="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_3_EVENT_4, vendor_testvendor3, 7, 2005/08/10 10:00" name="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_3_EVENT_4, vendor_testvendor3, 7, 2005/08/10 10:00" time="78.639">
      <failure>Error: Failed: &quot;Query did not succeed within the given timeout&quot;
    at Env.it (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:113:24)
    at it (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-jasmine2/build/jasmine/jasmineLight.js:98:21)
    at /home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-each/build/bind.js:47:15
    at Array.forEach (&lt;anonymous&gt;)
    at eachBind (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-each/build/bind.js:39:22)
    at Suite.&lt;anonymous&gt; (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/integration_tests/tests/transaction-view-athena-tests.ts:28:4)
    at addSpecsToSuite (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-jasmine2/build/jasmine/Env.js:356:49)
    at Env.describe (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-jasmine2/build/jasmine/Env.js:331:9)
    at describe (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-jasmine2/build/jasmine/jasmineLight.js:89:18)
    at Object.&lt;anonymous&gt; (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/integration_tests/tests/transaction-view-athena-tests.ts:21:1)
    at Runtime._execModule (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-runtime/build/index.js:1452:24)
    at Runtime._loadModule (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-runtime/build/index.js:1024:12)
    at Runtime.requireModule (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-runtime/build/index.js:884:12)
    at jasmine2 (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-jasmine2/build/index.js:195:13)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)
    at runTestInternal (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-runner/build/runTest.js:367:16)
    at runTest (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-runner/build/runTest.js:444:34)
    at Object.worker (/home/runner/work/di-billing-transaction-monitoring/di-billing-transaction-monitoring/node_modules/jest-runner/build/testWorker.js:106:12)</failure>
    </testcase>
    <testcase classname="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_3_EVENT_6, vendor_testvendor3, 14, 2005/09/10 10:00" name="
Upload events to s3 directly and check the transaction curated view 
 data retrieved from transaction_curated athena view should match the input data VENDOR_3_EVENT_6, vendor_testvendor3, 14, 2005/09/10 10:00" time="26.989">
    </testcase>
  </testsuite>
  <testsuite name="
 Synthetic Events Generation Tests
" errors="0" failures="0" skipped="0" timestamp="2023-09-14T13:55:38" time="386.286" tests="1">
    <testcase classname="
 Synthetic Events Generation Tests
 should validate the events in the transaction_standardised table contain all required fields when the current date is between start_date and end_date" name="
 Synthetic Events Generation Tests
 should validate the events in the transaction_standardised table contain all required fields when the current date is between start_date and end_date" time="11.077">
    </testcase>
  </testsuite>
  <testsuite name="
 Happy path tests 

 Generate valid event and check cloud watch logs lambda functions Filter,Clean, Store Transactions contains eventId
" errors="0" failures="0" skipped="0" timestamp="2023-09-14T14:00:37" time="104.27" tests="3">
    <testcase classname="
 Happy path tests 

 Generate valid event and check cloud watch logs lambda functions Filter,Clean, Store Transactions contains eventId
 Filter function cloud watch logs should contain eventid" name="
 Happy path tests 

 Generate valid event and check cloud watch logs lambda functions Filter,Clean, Store Transactions contains eventId
 Filter function cloud watch logs should contain eventid" time="8.424">
    </testcase>
    <testcase classname="
 Happy path tests 

 Generate valid event and check cloud watch logs lambda functions Filter,Clean, Store Transactions contains eventId
 Clean function cloud watch logs should contain eventid" name="
 Happy path tests 

 Generate valid event and check cloud watch logs lambda functions Filter,Clean, Store Transactions contains eventId
 Clean function cloud watch logs should contain eventid" time="1.578">
    </testcase>
    <testcase classname="
 Happy path tests 

 Generate valid event and check cloud watch logs lambda functions Filter,Clean, Store Transactions contains eventId
 Store Transactions function cloud watch logs should contain eventid" name="
 Happy path tests 

 Generate valid event and check cloud watch logs lambda functions Filter,Clean, Store Transactions contains eventId
 Store Transactions function cloud watch logs should contain eventid" time="1.418">
    </testcase>
  </testsuite>
  <testsuite name="
 Execute athena query to retrieve vendor service details
" errors="0" failures="0" skipped="0" timestamp="2023-09-14T14:02:22" time="31.519" tests="1">
    <testcase classname="
 Execute athena query to retrieve vendor service details
 retrieved vendor service details should match with vendor service csv uploaded in s3 config bucket " name="
 Execute athena query to retrieve vendor service details
 retrieved vendor service details should match with vendor service csv uploaded in s3 config bucket " time="12.69">
    </testcase>
  </testsuite>
  <testsuite name="Execute athena query to retrieve rate details" errors="0" failures="0" skipped="0" timestamp="2023-09-14T14:01:57" time="83.569" tests="1">
    <testcase classname="Execute athena query to retrieve rate details retrieved rate details should match rate csv uploaded in s3 config bucket" name="Execute athena query to retrieve rate details retrieved rate details should match rate csv uploaded in s3 config bucket" time="10.939">
    </testcase>
  </testsuite>
  <testsuite name="
 Filter function - Happy path tests
" errors="0" failures="0" skipped="0" timestamp="2023-09-14T14:02:05" time="76.041" tests="2">
    <testcase classname="
 Filter function - Happy path tests
 should store event in the storage bucket for a valid event" name="
 Filter function - Happy path tests
 should store event in the storage bucket for a valid event" time="3.197">
    </testcase>
    <testcase classname="
 Filter Function - Unhappy path tests
 should not store events with invalid EventName in the storage bucket" name="
 Filter Function - Unhappy path tests
 should not store events with invalid EventName in the storage bucket" time="7.121">
    </testcase>
  </testsuite>
  <testsuite name="
 Store function test
" errors="0" failures="0" skipped="0" timestamp="2023-09-14T14:03:21" time="19.94" tests="1">
    <testcase classname="
 Store function test
 should store cleaned events in the storage bucket" name="
 Store function test
 should store cleaned events in the storage bucket" time="7.223">
    </testcase>
  </testsuite>
  <testsuite name="
 Execute athena query to retrieve contract details details
" errors="0" failures="0" skipped="0" timestamp="2023-09-14T14:03:21" time="23.882" tests="1">
    <testcase classname="
 Execute athena query to retrieve contract details details
 retrieved contract details should match with contract csv uploaded in s3 config bucket " name="
 Execute athena query to retrieve contract details details
 retrieved contract details should match with contract csv uploaded in s3 config bucket " time="10.867">
    </testcase>
  </testsuite>
  <testsuite name="
 Unhappy path - Upload invalid pdf to the raw invoice bucket test
" errors="0" failures="0" skipped="0" timestamp="2023-09-14T14:01:57" time="130.749" tests="1">
    <testcase classname="
 Unhappy path - Upload invalid pdf to the raw invoice bucket test
 should move the original raw invoice to failed folder in s3 raw-invoice bucket upon uploading the invalid pdf file " name="
 Unhappy path - Upload invalid pdf to the raw invoice bucket test
 should move the original raw invoice to failed folder in s3 raw-invoice bucket upon uploading the invalid pdf file " time="4.365">
    </testcase>
  </testsuite>
  <testsuite name="
 Invoice data buckets exists in S3
" errors="0" failures="0" skipped="0" timestamp="2023-09-14T14:02:53" time="122.345" tests="3">
    <testcase classname="
 Invoice data buckets exists in S3
 Raw invoice bucket should exists in S3" name="
 Invoice data buckets exists in S3
 Raw invoice bucket should exists in S3" time="1.756">
    </testcase>
    <testcase classname="
 Invoice data buckets exists in S3
 Raw invoice textract data bucket should exists in S3" name="
 Invoice data buckets exists in S3
 Raw invoice textract data bucket should exists in S3" time="0.783">
    </testcase>
    <testcase classname="
 Invoice data buckets exists in S3
 Storage bucket should exists in S3" name="
 Invoice data buckets exists in S3
 Storage bucket should exists in S3" time="1.161">
    </testcase>
  </testsuite>
  <testsuite name="
 Verify VAT details exists in S3 config bucket
" errors="0" failures="0" skipped="0" timestamp="2023-09-14T14:03:42" time="126.649" tests="1">
    <testcase classname="
 Verify VAT details exists in S3 config bucket
 S3 config bucket should contain VAT details matches with expected vat config file " name="
 Verify VAT details exists in S3 config bucket
 S3 config bucket should contain VAT details matches with expected vat config file " time="0.692">
    </testcase>
  </testsuite>
</testsuites>